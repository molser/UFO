<ResourceDictionary 
    x:Class="UFO.Styles.CustomizedWindow.VS2012WindowStyle"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:local="clr-namespace:UFO.Styles.CustomizedWindow"
    xmlns:shell="http://schemas.microsoft.com/winfx/2006/xaml/presentation/shell"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:p ="clr-namespace:UFO.Properties"
    xmlns:molser="clr-namespace:MolserLib.Controls;assembly=MolserLib">

    <!--<ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="SharedDark.xaml"/>
    </ResourceDictionary.MergedDictionaries>-->

    <local:WindowsStyleToVisibilityMultiConverter  x:Key="windowsStyleToVisibilityMultiConverter"/>
    <BooleanToVisibilityConverter x:Key="bool2VisibilityConverter" />

    <Style x:Key="VS2012WindowStyleTitleBarButton" TargetType="{x:Type Button}">
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border
                            x:Name="PART_border"
                            Background="Transparent"
                            SnapsToDevicePixels="True"
                            />
                        <ContentPresenter />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_border" Property="Background" Value="Silver" />
                            <Setter TargetName="PART_border" Property="Opacity" Value="0.7" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="PART_border" Property="Background" Value="{DynamicResource  WindowTitleBarButtonPressed}"/>
                            <Setter TargetName="PART_border" Property="Opacity" Value="1" />
                            <Setter Property="Foreground" Value="Silver"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="VS2012WindowStyleCloseButton" TargetType="{x:Type Button}">
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid SnapsToDevicePixels="True">
                        <Border
                            x:Name="PART_border"
                            Background="Transparent"
                            SnapsToDevicePixels="True"
                            />
                        <ContentPresenter />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_border" Property="Background" Value="Red"/>
                            <Setter TargetName="PART_border" Property="Opacity" Value="0.7" />
                            <Setter Property="Foreground" Value="#FFF"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="PART_border" Property="Background" Value="Red"/>
                            <Setter TargetName="PART_border" Property="Opacity" Value="0.3" />
                            <Setter Property="Foreground" Value="#FFF"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="VS2012WindowStyle" TargetType="{x:Type Window}">
        <Setter Property="WindowStyle" Value="None" />
        <Setter Property="AllowsTransparency" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="MinWidth" Value="150" />
        <Setter Property="MinHeight" Value="40" />
        <Setter Property="ResizeMode" Value="CanResizeWithGrip" />
        <!--<Setter Property="Foreground" Value="{DynamicResource TextBoxFont}"/>-->
        <EventSetter Event="FrameworkElement.Loaded" Handler="WindowLoaded" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <!--
                    7 is a magic number. By default Windows fits a maximized window with Margin
                    7 7 7 5 to fill entire screen (WPF .Net 4.5). Larger numbers produce a gap
                    between maximized window and screen edges; smaller numbers show parts of
                    the window outside of the current monitor on multi-display computers.
                    Padding="7 7 7 5"
                    -->
                    <Border
                        x:Name="PART_Container"                                                
                        SnapsToDevicePixels="True">
                        <Grid                            
                            TextOptions.TextRenderingMode="ClearType"
                            TextOptions.TextFormattingMode="Display">
                            <Border
                                x:Name="PART_Border"
                                SnapsToDevicePixels="True"
                                Width="Auto"
                                Height="Auto"
                                Background="{DynamicResource TitleBarBackgroundBrush}"
                                BorderBrush="{DynamicResource VS2012WindowBorderBrush}"
                                BorderThickness="1"
                                Padding="0">
                                <DockPanel
                                    HorizontalAlignment="Stretch"
                                    Background="Transparent"
                                    VerticalAlignment="Stretch">
                                    <Border
                                    x:Name="TitleBar"
                                    DockPanel.Dock="Top"
                                    Background="{DynamicResource TitleBarBackgroundBrush}"
                                    BorderThickness="0"
                                    MouseLeftButtonDown="TitleBarMouseLeftButtonDown"
                                    MouseMove="TitleBarMouseMove">
                                        <Grid Height="25">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="auto"/>
                                                <ColumnDefinition />
                                                <ColumnDefinition Width="auto"/>
                                            </Grid.ColumnDefinitions>
                                            <Image
                                                x:Name="Icon"
                                                Grid.Column="0"
                                                Source="{Binding Path=Icon, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                                HorizontalAlignment="Right"
                                                Margin="6,0,0,0"
                                                Width="16"
                                                Height="16"
                                                MouseLeftButtonDown="IconMouseLeftButtonDown"                                                
                                            />
                                            <TextBlock
                                                x:Name="Caption"
                                                Grid.Column="1"
                                                HorizontalAlignment="Left"
                                                VerticalAlignment="Center"
                                                Margin="4,0,0,0"
                                                FontFamily="Segoe UI"
                                                FontSize="12"
                                                Opacity="0.66"
                                                TextTrimming="CharacterEllipsis"
                                                Text="{Binding Path=Title, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                Foreground="{DynamicResource VS2012WindowTitleTextBrush}"
                                            />
                                            <StackPanel Grid.Column="2" Orientation="Horizontal" HorizontalAlignment="Right">
                                                <Button
                                                    x:Name="MinButton" 
                                                    VerticalAlignment="Top"
                                                    Width="25"
                                                    Height="20"
                                                    Style="{DynamicResource VS2012WindowStyleTitleBarButton}"
                                                    Click="MinButtonClick"
                                                    ToolTip="Свернуть" Foreground="{DynamicResource WindowTitleBarButtonForeground}">
                                                    <Button.Visibility>
                                                        <MultiBinding Converter="{StaticResource windowsStyleToVisibilityMultiConverter}" 
                                                               ConverterParameter="IsMinimizeButton">
                                                            <Binding Path="ResizeMode" RelativeSource="{RelativeSource TemplatedParent}" Mode="OneWay"/>
                                                            <Binding Path="IsMinimizeButtonHidden" RelativeSource="{RelativeSource TemplatedParent}" Mode="OneWay"/>
                                                        </MultiBinding>
                                                    </Button.Visibility>
                                                    <Grid MaxHeight="12" MaxWidth="12">
                                                        <Path
                                                    Stroke="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}"
                                                    StrokeThickness="1"
                                                    Stretch="None"
                                                    HorizontalAlignment="Center"
                                                    VerticalAlignment="Center"
                                                    RenderOptions.EdgeMode="Aliased"
                                                    Data="M0,8 H8 M0,7 H8 M0,6 H8"
                                                    />
                                                    </Grid>
                                                </Button>
                                                <Button
                                                    x:Name="MaxButton" 
                                                    VerticalAlignment="Top"
                                                    Width="25"
                                                    Height="20"
                                                    Style="{DynamicResource VS2012WindowStyleTitleBarButton}"
                                                    Click="MaxButtonClick"
                                                    ToolTip="Развернуть"    Foreground="{DynamicResource WindowTitleBarButtonForeground}">
                                                    <Button.Visibility>
                                                        <MultiBinding Converter="{StaticResource windowsStyleToVisibilityMultiConverter}" 
                                                                      ConverterParameter="IsMaximizeButton">
                                                            <Binding Path="ResizeMode" RelativeSource="{RelativeSource TemplatedParent}" Mode="OneWay"/>
                                                            <Binding Path="IsMaximizeButtonHidden" RelativeSource="{RelativeSource TemplatedParent}" Mode="OneWay"/>
                                                        </MultiBinding>
                                                    </Button.Visibility>
                                                    <Grid MaxHeight="12" MaxWidth="12">
                                                        <Path
                                                            x:Name="PART_MaxButton_Path"
                                                            Stroke="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}"
                                                            StrokeThickness="1"
                                                            Stretch="None"
                                                            HorizontalAlignment="Center"
                                                            VerticalAlignment="Center"
                                                            RenderOptions.EdgeMode="Aliased"
                                                             Data="M0,0 H9 V9 H0 V0 Z"/>
                                                    </Grid>
                                                </Button>
                                                <Button
                                                    Grid.Column="4"
                                                    x:Name="CloseButton" 
                                                    VerticalAlignment="Top"
                                                    Width="25"
                                                    Height="20"
                                                    Style="{DynamicResource VS2012WindowStyleCloseButton}"
                                                    Click="CloseButtonClick"
                                                    ToolTip="Закрыть" Foreground="{DynamicResource WindowTitleBarButtonForeground}">
                                                    <Grid MaxHeight="12" MaxWidth="9">
                                                        <Path
                                                        Stroke="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}"
                                                        StrokeThickness="1"
                                                        Stretch="None"
                                                        HorizontalAlignment="Center"
                                                        VerticalAlignment="Center"
                                                        Data="M0,0 L10,10 M0,10 L10,0"/>
                                                    </Grid>
                                                </Button>
                                            </StackPanel>
                                        </Grid>
                                    </Border>
                                    <AdornerDecorator>
                                        <ContentPresenter Content="{TemplateBinding Content}"/>
                                    </AdornerDecorator>
                                </DockPanel>
                            </Border>
                            <!--<Line
                                MouseDown="OnSizeNorth"
                                x:Name="lnSizeNorth"
                                Stroke="Transparent"   
                                Cursor="SizeNS"
                                X1="1" X2="{TemplateBinding ActualWidth}" Y1="1" Y2="1"
                                StrokeThickness="3"
                            />
                        <Line
                                MouseDown="OnSizeSouth"
                                x:Name="lnSizeSouth"
                                Stroke="Transparent"
                                VerticalAlignment="Bottom" 
                                Cursor="SizeNS"
                                X1="1" X2="{TemplateBinding ActualWidth}" Y1="{TemplateBinding ActualHeight}" Y2="{TemplateBinding ActualHeight}"
                                StrokeThickness="3"
                            />
                        <Line
                                MouseDown="OnSizeWest"
                                x:Name="lnSizeWest"
                                Stroke="Transparent"
                                Cursor="SizeWE"
                                X1="1" X2="1" Y1="1" Y2="{TemplateBinding ActualHeight}"
                                StrokeThickness="10"
                            />
                        <Line
                                MouseDown="OnSizeEast"
                                x:Name="lnSizeEast"
                                Stroke="Transparent"
                                HorizontalAlignment="Right" 
                                Cursor="SizeWE"
                                X1="{TemplateBinding ActualWidth}" X2="{TemplateBinding ActualWidth}" Y1="1" Y2="{TemplateBinding ActualHeight}"
                                StrokeThickness="10"
                            />
                        <Rectangle MouseDown="OnSizeNorthWest" x:Name="rectSizeNorthWest" Cursor="SizeNWSE" Fill="Transparent" Width="10" Height="10" VerticalAlignment="Top" HorizontalAlignment="Left" />
                        <Rectangle MouseDown="OnSizeNorthEast" x:Name="rectSizeNorthEast" Cursor="SizeNESW" Fill="Transparent" Width="10" Height="10" VerticalAlignment="Top" HorizontalAlignment="Right" />
                        <Rectangle MouseDown="OnSizeSouthWest" x:Name="rectSizeSouthWest" Cursor="SizeNESW" Fill="Transparent" Width="10" Height="10" VerticalAlignment="Bottom" HorizontalAlignment="Left" />
                        <Rectangle MouseDown="OnSizeSouthEast" x:Name="rectSizeSouthEast" Cursor="SizeNWSE" Fill="Transparent" Width="10" Height="10" VerticalAlignment="Bottom" HorizontalAlignment="Right" />-->
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter TargetName="PART_MaxButton_Path" Property="Data" 
                                    Value="M0,3 H5 V8 H0 V3 M0,4 H5 M3,0 H8 V5 H7 M3,1 H8"/>
                            <Setter TargetName="MaxButton" Property="ToolTip" Value="Восстановить"/>
                        </Trigger>
                        <Trigger Property="WindowState" Value="Normal">
                            <Setter TargetName="PART_Border" Property="Effect">
                                <Setter.Value>
                                    <DropShadowEffect
                                        Color="black"
                                        Opacity="0.5"
                                        BlurRadius="7"
                                        ShadowDepth="0"                                        
                                        />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsActive" Value="False">
                            <Setter TargetName="PART_Border" Property="BorderBrush" Value="{StaticResource VS2012WindowBorderBrushInactive}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="WindowState" Value="Normal"/>
                                <Condition Property="IsActive" Value="False"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="PART_Border" Property="Effect">
                                    <Setter.Value>
                                        <DropShadowEffect
                                        Color="black"
                                        Opacity="0.3"
                                        BlurRadius="7"
                                        ShadowDepth="0"
                                        />
                                    </Setter.Value>
                                </Setter>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <Style TargetType="{x:Type StatusBar}">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource AncestorType=Window}}" Value="True">
                        <Setter Property="Foreground" Value="{DynamicResource VS2012WindowStatusForeground}" />
                        <Setter Property="Background" Value="{DynamicResource VS2012WindowBorderBrush}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource AncestorType=Window}}" Value="False">
                        <Setter Property="Foreground" Value="{DynamicResource VS2012WindowStatusForegroundInactive}" />
                        <Setter Property="Background" Value="{DynamicResource VS2012WindowBorderBrushInactive}" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
    </Style>

    <Style x:Key="VS2012WindowStyle2" TargetType="{x:Type Window}">
        <Setter Property="WindowStyle" Value="None" />
        <Setter Property="AllowsTransparency" Value="False" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="MinWidth" Value="150" />
        <Setter Property="MinHeight" Value="40" />
        <Setter Property="ResizeMode" Value="NoResize" />
        <!--<EventSetter Event="FrameworkElement.Loaded" Handler="WindowLoaded" />-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <!--
                    7 is a magic number. By default Windows fits a maximized window with Margin
                    7 7 7 5 to fill entire screen (WPF .Net 4.5). Larger numbers produce a gap
                    between maximized window and screen edges; smaller numbers show parts of
                    the window outside of the current monitor on multi-display computers.
                    Padding="7 7 7 5"
                    -->
                    <!--<Border
                        x:Name="PART_Container"                                                
                        SnapsToDevicePixels="True">-->
                    <Grid                            
                        TextOptions.TextRenderingMode="ClearType"
                        TextOptions.TextFormattingMode="Display">
                        <Border
                            x:Name="PART_Border"
                            SnapsToDevicePixels="True"
                            Width="Auto"
                            Height="Auto"
                            Background="{DynamicResource TitleBarBackgroundBrush}"
                            BorderBrush="{DynamicResource VS2012WindowBorderBrush}"
                            BorderThickness="1"
                            Padding="0">
                            <DockPanel
                                HorizontalAlignment="Stretch"
                                Background="Transparent"
                                VerticalAlignment="Stretch">
                                <Border
                                    x:Name="TitleBar"
                                    DockPanel.Dock="Top"
                                    Background="{DynamicResource TitleBarBackgroundBrush}"
                                    BorderThickness="0"
                                    MouseLeftButtonDown="TitleBarMouseLeftButtonDown"
                                    MouseMove="TitleBarMouseMove">
                                    <Grid Height="25">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="auto"/>
                                            <ColumnDefinition />
                                            <ColumnDefinition Width="auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Image
                                        x:Name="Icon"
                                        Grid.Column="0"
                                        Source="{Binding Path=Icon, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                        HorizontalAlignment="Right"
                                        Margin="6,0,0,0"
                                        Width="16"
                                        Height="16"
                                        MouseLeftButtonDown="IconMouseLeftButtonDown"/>
                                        <TextBlock
                                            x:Name="Caption"
                                            Grid.Column="1"
                                            HorizontalAlignment="Left"
                                            VerticalAlignment="Center"
                                            Margin="4,0,0,0"
                                            FontFamily="Segoe UI"
                                            FontSize="12"
                                            Opacity="0.66"
                                            TextTrimming="CharacterEllipsis"
                                            Text="{Binding Path=Title, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                            Foreground="{DynamicResource VS2012WindowTitleTextBrush}"/>
                                        <StackPanel Grid.Column="2" Orientation="Horizontal" HorizontalAlignment="Right">
                                            <Button
                                                x:Name="MinButton" 
                                                VerticalAlignment="Top"
                                                Width="25"
                                                Height="20"
                                                Style="{DynamicResource VS2012WindowStyleTitleBarButton}"
                                                Click="MinButtonClick"
                                                ToolTip="Свернуть" Foreground="{DynamicResource WindowTitleBarButtonForeground}">
                                                <Button.Visibility>
                                                    <MultiBinding Converter="{StaticResource windowsStyleToVisibilityMultiConverter}" 
                                                            ConverterParameter="MinimizeButton">
                                                        <!--<Binding Path="ResizeMode" RelativeSource="{RelativeSource TemplatedParent}" Mode="OneWay"/>-->
                                                        <Binding Path="IsMinimizeButtonHidden" RelativeSource="{RelativeSource TemplatedParent}" Mode="OneWay"/>
                                                    </MultiBinding>
                                                </Button.Visibility>
                                                <Grid MaxHeight="12" MaxWidth="12">
                                                    <Path
                                                Stroke="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}"
                                                StrokeThickness="1"
                                                Stretch="None"
                                                HorizontalAlignment="Center"
                                                VerticalAlignment="Center"
                                                RenderOptions.EdgeMode="Aliased"
                                                Data="M0,8 H8 M0,7 H8 M0,6 H8"
                                                />
                                                </Grid>
                                            </Button>
                                            <Button
                                                x:Name="MaxButton" 
                                                VerticalAlignment="Top"
                                                Width="25"
                                                Height="20"
                                                Style="{DynamicResource VS2012WindowStyleTitleBarButton}"
                                                Click="MaxButtonClick"
                                                ToolTip="Развернуть"    Foreground="{DynamicResource WindowTitleBarButtonForeground}">
                                                <Button.Visibility>
                                                    <MultiBinding Converter="{StaticResource windowsStyleToVisibilityMultiConverter}" 
                                                                        ConverterParameter="MaximizeButton">
                                                        <!--<Binding Path="ResizeMode" RelativeSource="{RelativeSource TemplatedParent}" Mode="OneWay"/>-->
                                                        <!--<Binding Path="IsMaximizeButtonHidden" RelativeSource="{RelativeSource TemplatedParent}" Mode="OneWay"/>-->
                                                        <Binding Path="IsNoResizable" RelativeSource="{RelativeSource TemplatedParent}" Mode="OneWay"/>
                                                    </MultiBinding>
                                                </Button.Visibility>
                                                <Grid MaxHeight="12" MaxWidth="12">
                                                    <Path
                                                    x:Name="PART_MaxButton_Path"
                                                    Stroke="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}"
                                                    StrokeThickness="1"
                                                    Stretch="None"
                                                    HorizontalAlignment="Center"
                                                    VerticalAlignment="Center"
                                                    RenderOptions.EdgeMode="Aliased"
                                                    Data="M0,0 H9 V9 H0 V0 Z"/>
                                                </Grid>
                                            </Button>
                                            <Button
                                            Grid.Column="4"
                                            x:Name="CloseButton" 
                                            VerticalAlignment="Top"
                                            Width="25"
                                            Height="20"
                                            Style="{DynamicResource VS2012WindowStyleCloseButton}"
                                            Click="CloseButtonClick"
                                            ToolTip="Закрыть" 
                                            Foreground="{DynamicResource WindowTitleBarButtonForeground}">
                                                <Grid MaxHeight="12" MaxWidth="9">
                                                    <Path
                                                    Stroke="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}"
                                                    StrokeThickness="1"
                                                    Stretch="None"
                                                    HorizontalAlignment="Center"
                                                    VerticalAlignment="Center"
                                                    Data="M0,0 L10,10 M0,10 L10,0"/>
                                                </Grid>
                                            </Button>
                                        </StackPanel>
                                    </Grid>
                                </Border>
                                <AdornerDecorator>
                                    <ContentPresenter/>
                                </AdornerDecorator>
                                <!--<ResizeGrip DockPanel.Dock="Bottom" HorizontalAlignment="Right" IsTabStop="False" Visibility="Visible" Width="20" Height="20"/>-->
                            </DockPanel>
                        </Border>
                        <Grid>
                            <Grid.Visibility>
                                <MultiBinding Converter="{StaticResource windowsStyleToVisibilityMultiConverter}" 
                                              ConverterParameter="ResizeBorder">
                                    <Binding Path="WindowState" RelativeSource="{RelativeSource TemplatedParent}" Mode="OneWay"/>
                                    <Binding Path="IsNoResizable" RelativeSource="{RelativeSource TemplatedParent}" Mode="OneWay"/>
                                </MultiBinding>
                            </Grid.Visibility>
                            <Line
                                    MouseDown="OnSizeNorth"
                                    Focusable="False"
                                    x:Name="lnSizeNorth"
                                    Stroke="Transparent"   
                                    Cursor="SizeNS"
                                    X1="1" 
                                    X2="{TemplateBinding ActualWidth}" Y1="1" Y2="1"
                                    StrokeThickness="5"/>
                            <Line
                                    MouseDown="OnSizeSouth"
                                    Focusable="False"
                                    x:Name="lnSizeSouth"
                                    Stroke="Transparent"
                                    VerticalAlignment="Bottom" 
                                    Cursor="SizeNS"
                                    X1="1" 
                                    X2="{TemplateBinding ActualWidth}" 
                                    Y1="{TemplateBinding ActualHeight}" 
                                    Y2="{TemplateBinding ActualHeight}"
                                    StrokeThickness="5"/>
                            <Line
                                    MouseDown="OnSizeWest"
                                    Focusable="False"
                                    x:Name="lnSizeWest"
                                    Stroke="Transparent"
                                    Cursor="SizeWE"
                                    X1="1" 
                                    X2="1" 
                                    Y1="1" 
                                    Y2="{TemplateBinding ActualHeight}"
                                    StrokeThickness="5"/>
                            <Line
                                    MouseDown="OnSizeEast"
                                    Focusable="False"
                                    x:Name="lnSizeEast"
                                    Stroke="Transparent"
                                    HorizontalAlignment="Right" 
                                    Cursor="SizeWE"
                                    X1="{TemplateBinding ActualWidth}" 
                                    X2="{TemplateBinding ActualWidth}" 
                                    Y1="1" 
                                    Y2="{TemplateBinding ActualHeight}"
                                    StrokeThickness="5"/>
                            <Rectangle MouseDown="OnSizeNorthWest" x:Name="rectSizeNorthWest" 
                                       Cursor="SizeNWSE" Fill="Transparent" Width="10" Height="10" 
                                       VerticalAlignment="Top" HorizontalAlignment="Left" Focusable="False"/>
                            <Rectangle MouseDown="OnSizeNorthEast" x:Name="rectSizeNorthEast" 
                                       Cursor="SizeNESW" Fill="Transparent" Width="10" Height="10" 
                                       VerticalAlignment="Top" HorizontalAlignment="Right" Focusable="False"/>
                            <Rectangle MouseDown="OnSizeSouthWest" x:Name="rectSizeSouthWest" 
                                       Cursor="SizeNESW" Fill="Transparent" Width="10" Height="10" 
                                       VerticalAlignment="Bottom" HorizontalAlignment="Left" Focusable="False"/>
                            <Rectangle MouseDown="OnSizeSouthEast" x:Name="rectSizeSouthEast" Cursor="SizeNWSE" 
                                       Fill="Transparent" Width="10" Height="10" 
                                       VerticalAlignment="Bottom" HorizontalAlignment="Right" Focusable="False"/>
                        </Grid>
                    </Grid>
                    <!--</Border>-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter TargetName="PART_MaxButton_Path" Property="Data" 
                                    Value="M0,3 H5 V8 H0 V3 M0,4 H5 M3,0 H8 V5 H7 M3,1 H8"/>
                            <Setter TargetName="MaxButton" Property="ToolTip" Value="Восстановить"/>
                        </Trigger>
                        <Trigger Property="WindowState" Value="Normal">
                            <Setter TargetName="PART_Border" Property="Effect">
                                <Setter.Value>
                                    <DropShadowEffect
                                        Color="black"
                                        Opacity="0.5"
                                        BlurRadius="7"
                                        ShadowDepth="0"                                        
                                        />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsActive" Value="False">
                            <Setter TargetName="PART_Border" Property="BorderBrush" Value="{StaticResource VS2012WindowBorderBrushInactive}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="WindowState" Value="Normal"/>
                                <Condition Property="IsActive" Value="False"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="PART_Border" Property="Effect">
                                    <Setter.Value>
                                        <DropShadowEffect
                                        Color="black"
                                        Opacity="0.3"
                                        BlurRadius="7"
                                        ShadowDepth="0"
                                        />
                                    </Setter.Value>
                                </Setter>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="VS2012WindowStyle3" TargetType="{x:Type Window}">
        <Setter Property="shell:WindowChrome.WindowChrome">
            <Setter.Value>
                <shell:WindowChrome 
                    GlassFrameThickness="0"
                    CaptionHeight="0"
                    CornerRadius="0"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Grid>
                        <Border Background="White"
                            Margin="{Binding Source={x:Static shell:SystemParameters2.Current}, Path=WindowNonClientFrameThickness}">
                            <ContentPresenter Content="{TemplateBinding Content}" />
                        </Border>
                        <TextBlock Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Title}"   
                               VerticalAlignment="Top" HorizontalAlignment="Left"   
                               Margin="36,8,0,0"/>
                        <Image Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Icon}"  
                           VerticalAlignment="Top" HorizontalAlignment="Left"  
                           Margin="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(shell:WindowChrome.WindowChrome).ResizeBorderThickness}"   
                           Width="{Binding Source={x:Static shell:SystemParameters2.Current}, Path=SmallIconSize.Width}"  
                           shell:WindowChrome.IsHitTestVisibleInChrome="True"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="VS2012WindowStyle4" TargetType="{x:Type Window}">
        <Setter Property="Foreground" Value="{DynamicResource TextBoxFont}"/>
        <Setter Property="shell:WindowChrome.WindowChrome">
            <Setter.Value>
                <shell:WindowChrome 
                    GlassFrameThickness="1"
                    CaptionHeight="25"
                    CornerRadius="0"
                    ResizeBorderThickness="7"/>
            </Setter.Value>
        </Setter>
        <EventSetter Event="FrameworkElement.Loaded" Handler="WindowLoaded" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <!--<Border
                        x:Name="PART_Container"                                                
                        SnapsToDevicePixels="True">-->
                    <!--<Grid                            
                        TextOptions.TextRenderingMode="ClearType"
                        TextOptions.TextFormattingMode="Display">-->
                    <!--<Border  x:Name="PART_Border"
                                SnapsToDevicePixels="True"-->
                    <!--Margin="7,7,7,5"-->
                    <Border
                            x:Name="PART_Border"
                            Width="Auto"
                            Height="Auto"
                            Background="{DynamicResource TitleBarBackgroundBrush}"
                            BorderBrush="{DynamicResource VS2012WindowBorderBrush}"
                            BorderThickness="1"
                            Padding="0">
                        <DockPanel
                                HorizontalAlignment="Stretch"
                                Background="Transparent"
                                VerticalAlignment="Stretch">
                            <Border
                                    x:Name="TitleBar"
                                    DockPanel.Dock="Top"
                                    Background="{DynamicResource TitleBarBackgroundBrush}"
                                    BorderThickness="0">
                                <Grid Height="25">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="auto"/>
                                        <ColumnDefinition />
                                        <ColumnDefinition Width="auto"/>
                                    </Grid.ColumnDefinitions>
                                    <Image
                                        x:Name="Icon"
                                        Grid.Column="0"
                                        Source="{Binding Path=Icon, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                        HorizontalAlignment="Right"
                                        Margin="6,0,0,0"
                                        Width="16"
                                        Height="16"
                                        MouseLeftButtonDown="IconMouseLeftButtonDown"
                                        shell:WindowChrome.IsHitTestVisibleInChrome="True"/>
                                    <TextBlock
                                            x:Name="Caption"
                                            Grid.Column="1"
                                            HorizontalAlignment="Left"
                                            VerticalAlignment="Center"
                                            Margin="4,0,0,0"
                                            FontFamily="Segoe UI"
                                            FontSize="12"
                                            Opacity="0.66"
                                            TextTrimming="CharacterEllipsis"
                                            Text="{Binding Path=Title, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                            Foreground="{DynamicResource VS2012WindowTitleTextBrush}"/>
                                    <StackPanel Grid.Column="2" Orientation="Horizontal" HorizontalAlignment="Right">
                                        <Button
                                                x:Name="MinButton"
                                                VerticalAlignment="Top"
                                                Width="25"
                                                Height="20"
                                                Style="{DynamicResource VS2012WindowStyleTitleBarButton}"
                                                Click="MinButtonClick"
                                                ToolTip="Свернуть" 
                                                Foreground="{DynamicResource WindowTitleBarButtonForeground}"                                                
                                                shell:WindowChrome.IsHitTestVisibleInChrome="True">
                                            <Button.Visibility>
                                                <MultiBinding Converter="{StaticResource windowsStyleToVisibilityMultiConverter}" 
                                                            ConverterParameter="MinimizeButton">
                                                    <Binding Path="IsMinimizeButtonHidden" RelativeSource="{RelativeSource TemplatedParent}" Mode="OneWay"/>
                                                </MultiBinding>
                                            </Button.Visibility>
                                            <Grid MaxHeight="12" MaxWidth="12">
                                                <Path
                                                Stroke="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}"
                                                StrokeThickness="1"
                                                Stretch="None"
                                                HorizontalAlignment="Center"
                                                VerticalAlignment="Center"
                                                RenderOptions.EdgeMode="Aliased"
                                                Data="M0,8 H8 M0,7 H8 M0,6 H8"
                                                />
                                            </Grid>
                                        </Button>
                                        <Button
                                                x:Name="MaxButton" 
                                                VerticalAlignment="Top"
                                                Width="25"
                                                Height="20"
                                                Style="{DynamicResource VS2012WindowStyleTitleBarButton}"
                                                Click="MaxButtonClick"
                                                ToolTip="Развернуть"    
                                                Foreground="{DynamicResource WindowTitleBarButtonForeground}"
                                                shell:WindowChrome.IsHitTestVisibleInChrome="True">
                                            <Button.Visibility>
                                                <MultiBinding Converter="{StaticResource windowsStyleToVisibilityMultiConverter}" 
                                                                        ConverterParameter="MaximizeButton">
                                                    <Binding Path="ResizeMode" RelativeSource="{RelativeSource TemplatedParent}" Mode="OneWay"/>
                                                </MultiBinding>
                                            </Button.Visibility>
                                            <Grid MaxHeight="12" MaxWidth="12">
                                                <Path
                                                    x:Name="PART_MaxButton_Path"
                                                    Stroke="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}"
                                                    StrokeThickness="1"
                                                    Stretch="None"
                                                    HorizontalAlignment="Center"
                                                    VerticalAlignment="Center"
                                                    RenderOptions.EdgeMode="Aliased"
                                                    Data="M0,0 H9 V9 H0 V0 Z"/>
                                            </Grid>
                                        </Button>
                                        <Button
                                            Grid.Column="4"
                                            x:Name="CloseButton" 
                                            VerticalAlignment="Top"
                                            Width="25"
                                            Height="20"
                                            Style="{DynamicResource VS2012WindowStyleCloseButton}"
                                            Click="CloseButtonClick"
                                            ToolTip="Закрыть" 
                                            Foreground="{DynamicResource WindowTitleBarButtonForeground}"
                                            shell:WindowChrome.IsHitTestVisibleInChrome="True">
                                            <Grid MaxHeight="12" MaxWidth="9">
                                                <Path
                                                    Stroke="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}"
                                                    StrokeThickness="1"
                                                    Stretch="None"
                                                    HorizontalAlignment="Center"
                                                    VerticalAlignment="Center"
                                                    Data="M0,0 L10,10 M0,10 L10,0"/>
                                            </Grid>
                                        </Button>
                                    </StackPanel>
                                </Grid>
                            </Border>
                            <AdornerDecorator>
                                <ContentPresenter Content="{TemplateBinding Content}"/>
                            </AdornerDecorator>
                        </DockPanel>
                    </Border>
                    <!--</Grid>-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter TargetName="PART_MaxButton_Path" Property="Data" 
                                    Value="M0,3 H5 V8 H0 V3 M0,4 H5 M3,0 H8 V5 H7 M3,1 H8"/>
                            <Setter TargetName="MaxButton" Property="ToolTip" Value="Восстановить"/>
                        </Trigger>
                        <Trigger Property="IsActive" Value="False">
                            <Setter TargetName="PART_Border" Property="BorderBrush" Value="{DynamicResource VS2012WindowBorderBrushInactive}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <Style TargetType="{x:Type StatusBar}">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource AncestorType=Window}}" Value="True">
                        <Setter Property="Foreground" Value="{DynamicResource VS2012WindowStatusForeground}" />
                        <Setter Property="Background" Value="{DynamicResource VS2012WindowBorderBrush}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource AncestorType=Window}}" Value="False">
                        <Setter Property="Foreground" Value="{DynamicResource VS2012WindowStatusForegroundInactive}" />
                        <Setter Property="Background" Value="{DynamicResource VS2012WindowBorderBrushInactive}" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
    </Style>
    <!--<Style TargetType="{x:Type Window}" BasedOn="{StaticResource VS2012WindowStyle4}"/>-->

    <!-- Menu -->

    <Style TargetType="{x:Type Menu}">
        <Style.Resources>
            <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
                <Setter Property="Height" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Separator}">
                            <Border BorderBrush="{DynamicResource MenuSeparatorBorderBrush}" BorderThickness="1" Margin="25,0,0,0"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style TargetType="{x:Type MenuItem}">
                <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type Menu}}}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type MenuItem}">
                            <!--Border 1-->
                            <Border x:Name="Border" Background="Transparent" BorderBrush="Transparent" 
                                    BorderThickness="0" SnapsToDevicePixels="True">
                                <Grid x:Name="Grid">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition x:Name="Col0" MinWidth="24" Width="Auto" 
                                                          SharedSizeGroup="MenuItemIconColumnGroup"/>
                                        <ColumnDefinition Width="Auto" SharedSizeGroup="MenuTextColumnGroup"/>
                                        <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                        <ColumnDefinition x:Name="Col3" Width="14"/>
                                    </Grid.ColumnDefinitions>
                                    <!--<Border x:Name="ImageBorder"
                                            Grid.Column="0"                                            
                                            Background="#FFF2F4FE">
                                    </Border>-->
                                    <ContentPresenter x:Name="Icon" Grid.Column="0" VerticalAlignment="Center" 
                                                ContentSource="Icon"/>

                                    <Path x:Name="CheckMark" 
                                                   Grid.Column="0"
                                                    Margin="5,3,0,0"
                                                    Width="9"
                                                    Height="9"
                                                    Visibility="Collapsed"
                                                    SnapsToDevicePixels="False"
                                                    HorizontalAlignment="Center"
                                                    StrokeThickness="1"
                                                    Data="M 0.02388605 5.1152487 2.0600178 6.4616259 5.373487 0.02865756 3.7001337 0.03368502 1.7132586 4.6388117 0.04216569 3.3973376 Z">
                                        <Path.Stroke>
                                            <SolidColorBrush Color="Green"/>
                                        </Path.Stroke>
                                    </Path>

                                    <ContentPresenter Grid.Column="1" Margin="{TemplateBinding Padding}" 
                                                      x:Name="HeaderHost" RecognizesAccessKey="True" 
                                                      ContentSource="Header" VerticalAlignment="Center"/>
                                    <ContentPresenter Grid.Column="2" Margin="8,1,8,1" x:Name="IGTHost" 
                                                      ContentSource="InputGestureText" VerticalAlignment="Center"/>
                                    <Grid Grid.Column="3" Margin="4,0,6,0" x:Name="ArrowPanel" VerticalAlignment="Center">
                                        <Path x:Name="ArrowPanelPath" HorizontalAlignment="Right" VerticalAlignment="Center" 
                                              Fill="{TemplateBinding Foreground}" Data="M0,0 L0,8 L4,4 z"/>
                                    </Grid>
                                    <Popup IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" 
                                           Placement="Right" HorizontalOffset="-1" x:Name="SubMenuPopup" Focusable="false"
                                           PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                                           AllowsTransparency="True">
                                        <Grid Margin="0,0,5,5">
                                            <!--Border 2-->
                                            <Border x:Name="SubMenuBorder" 
                                                    BorderBrush="{DynamicResource MenuSeparatorBorderBrush}"
                                                    BorderThickness="1" Background="{DynamicResource SubmenuItemBackground}" 
                                                    SnapsToDevicePixels="True">
                                                <Grid x:Name="SubMenu" Grid.IsSharedSizeScope="True" Margin="2">
                                                    <StackPanel IsItemsHost="True" 
                                                                KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                                </Grid>
                                                <Border.Effect>
                                                    <DropShadowEffect ShadowDepth="2" Color="Black"/>
                                                </Border.Effect>
                                            </Border>
                                            <!--Border 3-->
                                            <Border Margin="1,0,0,0" x:Name="TransitionBorder" Width="0" Height="2" 
                                                    VerticalAlignment="Top" HorizontalAlignment="Left" 
                                                    Background="{DynamicResource SubmenuItemBackground}" SnapsToDevicePixels="False"
                                                    BorderThickness="1" BorderBrush="{DynamicResource SubmenuItemBackground}"/>
                                        </Grid>
                                    </Popup>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="Role" Value="TopLevelHeader">
                                    <Setter Property="Padding" Value="8,0,8,2"/>
                                    <Setter TargetName="SubMenuPopup" Property="Placement" Value="Bottom"/>
                                    <Setter TargetName="Col0" Property="MinWidth" Value="0"/>
                                    <Setter TargetName="Col3" Property="Width" Value="Auto"/>
                                    <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="IGTHost" Property="Visibility" Value="Collapsed" />
                                    <Setter TargetName="ArrowPanel" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="SubMenuBorder" Property="BorderThickness" Value="1,1,1,1"/>
                                    <Setter TargetName="SubMenu" Property="Margin" Value="2"/>
                                    <Setter TargetName="TransitionBorder" Property="Width" Value="{Binding ActualWidth, ElementName=Grid}"/>
                                    <Setter TargetName="Border" Property="BorderThickness" Value="1"/>
                                </Trigger>
                                <Trigger Property="Role" Value="TopLevelItem">
                                    <Setter Property="Padding" Value="6,0,6,2"/>
                                    <Setter TargetName="Col0" Property="MinWidth" Value="0"/>
                                    <Setter TargetName="Col3" Property="Width" Value="Auto"/>
                                    <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="IGTHost" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="ArrowPanel" Property="Visibility" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="Role" Value="SubmenuHeader">
                                    <Setter Property="DockPanel.Dock" Value="Top"/>
                                    <Setter Property="Padding" Value="10,3,0,3"/>
                                    <Setter TargetName="Border" Property="MinHeight" Value="22"/>
                                    <Setter TargetName="Border" Property="Background" Value="{DynamicResource SubmenuItemBackground}"/>
                                </Trigger>
                                <Trigger Property="Role" Value="SubmenuItem">
                                    <Setter Property="DockPanel.Dock" Value="Top"/>
                                    <Setter Property="Padding" Value="10,3,0,3"/>
                                    <Setter TargetName="Border" Property="MinHeight" Value="22"/>
                                    <Setter TargetName="ArrowPanel" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="Border" Property="Background" Value="{DynamicResource SubmenuItemBackground}"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsHighlighted" Value="true"/>
                                        <Condition Property="Role" Value="TopLevelHeader"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Border" Property="Background" Value="{StaticResource DarkBrush}"/>
                                    <!--<Setter TargetName="ImageBorder" Property="Background" Value="{StaticResource DarkBrush}"/>-->
                                    <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource SolidBorderBrush}"/>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsHighlighted" Value="true"/>
                                        <Condition Property="Role" Value="TopLevelItem"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Border" Property="Background" Value="{DynamicResource DarkBrush}"/>
                                    <!--<Setter TargetName="ImageBorder" Property="Background" Value="{StaticResource DarkBrush}"/>-->
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsHighlighted" Value="true"/>
                                        <Condition Property="Role" Value="SubmenuHeader"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Border" Property="Background" Value="{DynamicResource DarkBrush}"/>
                                    <!--<Setter TargetName="ImageBorder" Property="Background" Value="{StaticResource DarkBrush}"/>-->
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsHighlighted" Value="true"/>
                                        <Condition Property="Role" Value="SubmenuItem"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Border" Property="Background" Value="{DynamicResource DarkBrush}"/>
                                    <!--<Setter TargetName="ImageBorder" Property="Background" Value="{StaticResource DarkBrush}"/>-->
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSubmenuOpen" Value="true"/>
                                        <Condition Property="Role" Value="TopLevelHeader"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Border" Property="Background" Value="{DynamicResource SubmenuItemBackground}"/>
                                    <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource MenuSeparatorBorderBrush}"/>
                                    <Setter TargetName="Border" Property="BorderThickness" Value="1,1,1,0"/>
                                    <!--<Setter TargetName="ImageBorder" Property="Background" Value="{StaticResource DarkBrush}"/>-->
                                </MultiTrigger>
                                <Trigger Property="IsSubmenuOpen" Value="true">
                                    <Setter TargetName="ArrowPanelPath" Property="Fill" Value="{DynamicResource BackgroundSelected}"/>
                                </Trigger>
                                <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                                    <Setter TargetName="SubMenuPopup" Property="PopupAnimation" Value="None"/>
                                </Trigger>
                                <Trigger Property="Icon" Value="{x:Null}">
                                    <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Foreground" Value="{DynamicResource MenuDisabledForeground}"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <!--<Condition Property="Role" Value="SubmenuItem"/>-->
                                        <Condition Property="IsChecked"  Value="true"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>
        <Setter Property="Background" Value="{DynamicResource TitleBarBackgroundBrush}"/>
        <!--<Setter Property="Foreground" Value="{StaticResource Foreground}"/>-->

    </Style>

    <!-- SimpleStyles: Button -->

    <Style x:Key="StandardButton"  TargetType="{x:Type Button}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Foreground" Value="{DynamicResource MenuTextColor}"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource ButtonFocusVisual}"/>
        <!--<Setter Property="MinHeight" Value="23"/>
        <Setter Property="MinWidth" Value="75"/>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border 
                                x:Name="Border"  
                                CornerRadius="0" 
                                BorderThickness="1"
                                Background="{DynamicResource LightBrush}"
                                BorderBrush="{DynamicResource NormalBorderBrush}"
                                SnapsToDevicePixels="True">
                        <ContentPresenter 
                                        Margin="2"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"                                        
                                        RecognizesAccessKey="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DarkBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="Button" BasedOn="{StaticResource StandardButton}"/>

    <Style x:Key="RadiusButton"  TargetType="{x:Type Button}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource ButtonFocusVisual}"/>
        <!--<Setter Property="MinHeight" Value="23"/>
        <Setter Property="MinWidth" Value="75"/>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border 
                                x:Name="Border"  
                                CornerRadius="10" 
                                BorderThickness="1"
                                Background="{DynamicResource LightBrush}"
                                BorderBrush="{DynamicResource NormalBorderBrush}"
                                SnapsToDevicePixels="True">
                        <ContentPresenter 
                                        Margin="2"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        RecognizesAccessKey="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DarkBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="UncheckButton" TargetType="{x:Type Button}" BasedOn="{StaticResource StandardButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border" 
                            CornerRadius="0" 
                            BorderThickness="1"
                            Background="{DynamicResource LightBrush}"
                            BorderBrush="{DynamicResource NormalBorderBrush}"
                            SnapsToDevicePixels="True">
                        <Border Width="15" 
                            Height="15" 
                            CornerRadius="0" 
                            Background="{DynamicResource NormalBrush}"
                            BorderThickness="1"
                            BorderBrush="{DynamicResource NormalBorderBrush}"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center">
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DarkBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="StandardToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <!--<Setter Property="MinHeight" Value="23"/>
        <Setter Property="MinWidth" Value="75"/>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" 
                            CornerRadius="0" 
                            BorderThickness="1"
                            Background="{DynamicResource LightBrush}"
                            BorderBrush="{DynamicResource NormalBorderBrush}"
                            SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" 
                                          Margin="2"
                                          ContentTemplate="{TemplateBinding ContentTemplate}" 
                                          Content="{TemplateBinding Content}" 
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}" 
                                          Focusable="False" 
                                          HorizontalAlignment="Center" 
                                          VerticalAlignment="Center"
                                          RecognizesAccessKey="True" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="True">
                            <!--<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>-->
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <!--<Setter Property="Background" TargetName="border" Value="#FFBEE6FD"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF3C7FB1"/>-->
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource DarkBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <!--<Setter Property="Background" TargetName="border" Value="#FFC4E5F6"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF2C628B"/>-->
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource PressedBrush}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <!--<Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>-->
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource PressedBrush}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <!--<Setter Property="Background" TargetName="border" Value="#FFF4F4F4"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                            <Setter Property="Foreground" Value="#FF838383"/>-->
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource StandardToggleButton}"/>

    <Style x:Key="ShowCheckedButton" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource StandardToggleButton}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="False"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" 
                            CornerRadius="0" 
                            BorderThickness="1"
                            Background="{DynamicResource LightBrush}"
                            BorderBrush="{DynamicResource NormalBorderBrush}"
                            SnapsToDevicePixels="True">
                        <Border Width="15" 
                            Height="15" 
                            CornerRadius="0" 
                            Background="{DynamicResource NormalBrush}"
                            BorderThickness="1"
                            BorderBrush="{DynamicResource NormalBorderBrush}">
                            <Path 
                              Width="9" Height="9" 
                              SnapsToDevicePixels="False" 
                              Stroke="{DynamicResource GlyphBrush}"
                              StrokeThickness="2"
                              Data="M 0 4 L 4 8 L 9 0" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource DarkBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource PressedBrush}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource PressedBrush}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Focus Visual -->
    <Style x:Key="ButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle 
                                  Margin="2"
                                  StrokeThickness="1"
                                  Stroke="#60000000"
                                  StrokeDashArray="1 2"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- SimpleStyles: ToolBar -->

    <Style x:Key="ToolBarButtonBaseStyle" TargetType="{x:Type ButtonBase}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Foreground" Value="{DynamicResource MenuTextColor}"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border 
                        x:Name="Border"  
                        BorderThickness="1"
                        Background="Transparent"
                        BorderBrush="Transparent">
                        <ContentPresenter 
                          Margin="2"
                          HorizontalAlignment="Center"
                          VerticalAlignment="Center"
                          RecognizesAccessKey="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource SelectedBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource SolidBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DarkBrush}" />
                            <!--<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource SolidBorderBrush}" />-->
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}" />
                            <!--<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource SolidBorderBrush}" />-->
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="{x:Static ToolBar.ButtonStyleKey}" 
         BasedOn="{StaticResource ToolBarButtonBaseStyle}"
         TargetType="{x:Type Button}"/>
    <Style x:Key="{x:Static ToolBar.ToggleButtonStyleKey}" 
         BasedOn="{StaticResource ToolBarButtonBaseStyle}"
         TargetType="{x:Type ToggleButton}"/>
    <Style x:Key="{x:Static ToolBar.CheckBoxStyleKey}" BasedOn="{StaticResource ToolBarButtonBaseStyle}" TargetType="{x:Type CheckBox}"/>
    <Style x:Key="{x:Static ToolBar.RadioButtonStyleKey}"
         BasedOn="{StaticResource ToolBarButtonBaseStyle}"
         TargetType="{x:Type RadioButton}"/>

    <Style x:Key="{x:Static ToolBar.TextBoxStyleKey}" TargetType="{x:Type TextBox}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border 
                        x:Name="Border"
                        Padding="2"
                        Background="{DynamicResource WindowBackgroundBrush}"
                        BorderBrush="{DynamicResource SolidBorderBrush}"
                        BorderThickness="1" >
                        <ScrollViewer Margin="0" x:Name="PART_ContentHost"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBackgroundBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToolBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Cursor" Value="SizeAll"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="Transparent"
                            SnapsToDevicePixels="True">
                        <Rectangle Margin="0,2">
                            <Rectangle.Fill>
                                <DrawingBrush Viewport="0,0,4,4" 
                                      ViewportUnits="Absolute"
                                      Viewbox="0,0,8,8"
                                      ViewboxUnits="Absolute"
                                      TileMode="Tile">
                                    <DrawingBrush.Drawing>
                                        <DrawingGroup>
                                            <GeometryDrawing Brush="#AAA"
                                                Geometry="M 4 4 L 4 8 L 8 8 L 8 4 z"/>
                                        </DrawingGroup>
                                    </DrawingBrush.Drawing>
                                </DrawingBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToolBarOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Bd"
            CornerRadius="0,3,3,0"
            Background="Transparent"
            SnapsToDevicePixels="true">
                        <Grid>
                            <Path x:Name="Arrow"
                Fill="Black"
                VerticalAlignment="Bottom"
                Margin="2,3"
                Data="M -0.5 3 L 5.5 3 L 2.5 6 Z"/>
                            <ContentPresenter/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource DarkBrush}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource DarkBrush}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource DarkBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Arrow" Property="Fill" Value="#AAA"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type ToolBar}" TargetType="{x:Type ToolBar}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolBar}">
                    <Border x:Name="Border"  
                        CornerRadius="2" 
                        BorderThickness="1"
                        Background="{DynamicResource TitleBarBackgroundBrush}"
                        BorderBrush="{DynamicResource VeryLightBorderBrush}">
                        <DockPanel >
                            <ToggleButton DockPanel.Dock="Right"
                                IsEnabled="{TemplateBinding HasOverflowItems}"
                                Style="{StaticResource ToolBarOverflowButtonStyle}"
                                IsChecked="{Binding IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                ClickMode="Press">
                                <Popup x:Name="OverflowPopup"
                                    AllowsTransparency="true"
                                    Placement="Bottom"
                                    IsOpen="{Binding IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                    StaysOpen="false"
                                    Focusable="false"
                                    PopupAnimation="Slide">
                                    <Border x:Name="DropDownBorder"
                                        Background="{DynamicResource WindowBackgroundBrush}"
                                        BorderThickness="1"
                                        BorderBrush="{DynamicResource SolidBorderBrush}">
                                        <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel"
                                          Margin="2"
                                          WrapWidth="200"
                                          Focusable="true" 
                                          FocusVisualStyle="{x:Null}"
                                          KeyboardNavigation.TabNavigation="Cycle"
                                          KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                    </Border>
                                </Popup>
                            </ToggleButton>

                            <Thumb x:Name="ToolBarThumb"
                                Style="{DynamicResource ToolBarThumbStyle}"
                                Width="10"/>
                            <ToolBarPanel x:Name="PART_ToolBarPanel"
                                IsItemsHost="true"
                                Margin="0,1,2,2"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsOverflowOpen" Value="true">
                            <Setter TargetName="ToolBarThumb" Property="IsEnabled" Value="false"/>
                        </Trigger>
                        <Trigger Property="ToolBarTray.IsLocked" Value="true">
                            <Setter TargetName="ToolBarThumb" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type ToolBarTray}" TargetType="{x:Type ToolBarTray}" >
        <Setter Property="Background" Value="{DynamicResource HorizontalLightBrush}"/>
    </Style>

    <!-- SimpleStyles: CheckBox -->
    <Style x:Key="StandardCheckBox" TargetType="{x:Type CheckBox}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <!--<Setter Property="FocusVisualStyle"	Value="{StaticResource CheckBoxFocusVisual}"/>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Border x:Name="Border"  
                                Width="{Binding Width, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                Height="{Binding Height, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                MinWidth="15"
                                MinHeight="15"
                                CornerRadius="0" 
                                Background="{StaticResource NormalBrush}"
                                BorderThickness="1"
                                BorderBrush="{DynamicResource NormalBorderBrush}"
                                Padding="2">
                                <!--<Viewbox x:Name="CheckMark">-->
                                <Path 
                                        x:Name="CheckMark"
                                        Stretch="Uniform"                                    
                                        SnapsToDevicePixels="False" 
                                        Fill="{Binding Foreground, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                        StrokeThickness="0.5"
                                        Stroke="{Binding Foreground, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                        StrokeLineJoin="Round" 
                                        Data="M 0.84970682 2.3379582 2.6300278 4.0551519 6.1502933 1.8310547e-7 7 0.76552058 2.7312007 6.0000002 0 3.2069169 Z"/>
                                <!--</Viewbox>-->
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter Margin="0,0,0,0"
                                          VerticalAlignment="Center"
                                          HorizontalAlignment="Left"
                                          RecognizesAccessKey="True"/>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="CheckMark" Property="Data" Value="M 0 7 L 7 0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource DarkBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource SolidBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
                        </Trigger>
                        <!--<DataTrigger Binding="{Binding Foreground, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" Value="{x:Null}">
                            <Setter TargetName="CheckMark" Property="Stroke" Value="{StaticResource GlyphBrush}"/>
                        </DataTrigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource StandardCheckBox}"/>


    <Style x:Key="StandardDatePicker" TargetType="{x:Type DatePicker}">
        <Setter Property="CalendarStyle" Value="{StaticResource StandardCalendarStyle}" />
        <Setter Property="Foreground" Value="{DynamicResource TextColor}"/>
        <Setter Property="IsTodayHighlighted" Value="True"/>
        <Setter Property="SelectedDateFormat" Value="Short"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="BorderBrush" Value="{DynamicResource LightBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePicker}">
                    <Border  x:Name="Main_DatePicker_Border"
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{DynamicResource TextBoxBackgroundBrush}"
                            BorderBrush="{DynamicResource LightBorderBrush}" 
                            Padding="{TemplateBinding Padding}">
                        <Grid x:Name="PART_Root" 
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid.Resources>
                                <ControlTemplate x:Key="DropDownButtonTemplate" TargetType="{x:Type ButtonBase}">
                                    <Border x:Name="Border"                            
                                        BorderBrush="{DynamicResource LightBorderBrush}"
                                        BorderThickness="1"
                                        Width="19"
                                        Height="18">
                                        <Grid x:Name="CalendarGrid"
                                            Background="{DynamicResource TextBoxBackgroundBrush}">
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="2*"/>
                                                <RowDefinition Height="5*"/>
                                            </Grid.RowDefinitions>
                                            <Border x:Name="CalendarHeader"
                                                Grid.Row="0"
                                                BorderThickness="0"
                                                Background="#FF9BC0FF"
                                                Padding="0">
                                                <Ellipse x:Name="Elipse" 
                                                    Fill="{DynamicResource TextBoxBackgroundBrush}" 
                                                    HorizontalAlignment="Center"
                                                    VerticalAlignment="Center"
                                                    Width="2"
                                                    Height="2"/>
                                            </Border>
                                            <Border x:Name="DateBorder"
                                                Grid.Row="1"
                                                Background="Transparent"
                                                BorderThickness="0"
                                                VerticalAlignment="Top"
                                                Padding="0">
                                                <TextBlock x:Name="CalendarText"
                                                     Foreground="{DynamicResource TextBoxFont}"
                                                     Text="15" 
                                                     Margin="0,-1,0,0"
                                                     FontSize="9"
                                                     HorizontalAlignment="Center"
                                                     VerticalAlignment="Top"/>
                                                <!--Text="{Binding Value, StringFormat=\{0:dd\}, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:DateTimePicker}}"-->
                                            </Border>
                                        </Grid>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="true">
                                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource SolidBorderBrush}" />
                                            <Setter TargetName="CalendarGrid" Property="Background" Value="{DynamicResource TextBoxInActiveBackground}"/>
                                            <!--<Setter TargetName="CalendarHeader" Property="Stroke" Value="{StaticResource SolidBorderBrush}" />-->
                                        </Trigger>
                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter TargetName="CalendarHeader" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}"/>
                                            <Setter TargetName="CalendarText" Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Grid.Resources>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="auto"/>
                            </Grid.ColumnDefinitions>
                            <Button x:Name="PART_Button" 
                                    Grid.Column="1" 
                                    Foreground="{TemplateBinding Foreground}"                                    
                                    Focusable="False" 
                                    HorizontalAlignment="Right" 
                                    Margin="3,0,3,0" 
                                    Grid.Row="0" 
                                    Template="{StaticResource DropDownButtonTemplate}"
                                    VerticalAlignment="Top"
                                    Opacity="1"/>
                            <DatePickerTextBox  x:Name="PART_TextBox" 
                                                Grid.Column="0" 
                                                Focusable="{TemplateBinding Focusable}" 
                                                HorizontalContentAlignment="Stretch" 
                                                Grid.Row="0" 
                                                VerticalContentAlignment="Stretch"
                                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                FontSize="{TemplateBinding FontSize}">
                                <DatePickerTextBox.Style>
                                    <Style TargetType="{x:Type DatePickerTextBox}">
                                        <Setter Property="Foreground" Value="{DynamicResource TextColor}"/>
                                        <Setter Property="Background" Value="{DynamicResource TextBoxBackgroundBrush}"/>
                                        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
                                        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                                        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type DatePickerTextBox}">
                                                    <Grid>
                                                        <Grid.Resources>
                                                            <SolidColorBrush x:Key="WatermarkBrush" Color="#FFAAAAAA"/>
                                                        </Grid.Resources>
                                                        <VisualStateManager.VisualStateGroups>
                                                            <VisualStateGroup x:Name="CommonStates">
                                                                <VisualStateGroup.Transitions>
                                                                    <VisualTransition GeneratedDuration="0"/>
                                                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
                                                                </VisualStateGroup.Transitions>
                                                                <VisualState x:Name="Normal"/>
                                                            </VisualStateGroup>
                                                            <VisualStateGroup x:Name="WatermarkStates">
                                                                <VisualStateGroup.Transitions>
                                                                    <VisualTransition GeneratedDuration="0"/>
                                                                </VisualStateGroup.Transitions>
                                                                <VisualState x:Name="Unwatermarked"/>
                                                                <VisualState x:Name="Watermarked">
                                                                    <Storyboard>
                                                                        <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ContentElement"/>
                                                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Watermark"/>
                                                                    </Storyboard>
                                                                </VisualState>
                                                            </VisualStateGroup>
                                                            <VisualStateGroup x:Name="FocusStates">
                                                                <VisualStateGroup.Transitions>
                                                                    <VisualTransition GeneratedDuration="0"/>
                                                                </VisualStateGroup.Transitions>
                                                                <VisualState x:Name="Unfocused"/>
                                                            </VisualStateGroup>
                                                        </VisualStateManager.VisualStateGroups>
                                                        <Border x:Name="Border" 
                                                                BorderBrush="{TemplateBinding BorderBrush}" 
                                                                BorderThickness="{TemplateBinding BorderThickness}" 
                                                                Background="{TemplateBinding Background}" 
                                                                CornerRadius="0" 
                                                                Opacity="1" 
                                                                Padding="{TemplateBinding Padding}"
                                                                >
                                                            <Grid x:Name="WatermarkContent" 
                                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                                                <Border x:Name="ContentElement" 
                                                                        BorderBrush="#FFFFFFFF" 
                                                                        BorderThickness="0"
                                                                        />
                                                                <Border x:Name="watermark_decorator" 
                                                                        BorderBrush="#FFFFFFFF" 
                                                                        BorderThickness="0">
                                                                    <ContentControl x:Name="PART_Watermark" 
                                                                                    Focusable="False" 
                                                                                    IsHitTestVisible="False" 
                                                                                    Opacity="0" 
                                                                                    Padding="2"
                                                                                    VerticalAlignment="Center">
                                                                    </ContentControl>
                                                                </Border>
                                                                <ScrollViewer x:Name="PART_ContentHost"
                                                                              Margin="0"
                                                                              HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                                              VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                                <Border x:Name="FocusVisual" BorderBrush="#FF45D6FA" CornerRadius="1" IsHitTestVisible="False" Opacity="0"/>
                                                            </Grid>
                                                        </Border>
                                                    </Grid>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </DatePickerTextBox.Style>
                            </DatePickerTextBox>
                            <Grid x:Name="PART_DisabledVisual" 
                                  Grid.ColumnSpan="2" 
                                  Grid.Column="0" 
                                  IsHitTestVisible="False" 
                                  Opacity="0" Grid.Row="0">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Rectangle Grid.Column="0" Fill="#A5FFFFFF" RadiusY="1" Grid.Row="0" RadiusX="1"/>
                                <Rectangle Grid.Column="1" Fill="#A5FFFFFF" Height="18" Margin="3,0,3,0" RadiusY="1" Grid.Row="0" RadiusX="1" Width="19"/>
                                <Popup x:Name="PART_Popup" AllowsTransparency="True" Placement="Bottom" PlacementTarget="{Binding ElementName=PART_TextBox}" StaysOpen="False"/>
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="false">
                            <Setter Property="Foreground" TargetName="PART_TextBox" Value="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Main_DatePicker_Border" Property="BorderBrush"  Value="{StaticResource SolidBorderBrush}" />
                            <Setter TargetName="Main_DatePicker_Border" Property="Background" Value="{DynamicResource TextBoxInActiveBackground}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="true" SourceName="PART_TextBox">
                            <Setter TargetName="Main_DatePicker_Border" Property="BorderBrush"  Value="{StaticResource SolidBorderBrush}" />
                            <!--<Setter TargetName="PART_TextBox" Property="TextBox.SelectedText"  Value="1234" />-->
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="DatePicker" BasedOn="{StaticResource StandardDatePicker}"/>


    <!--Calendar-->

    <!--Style for the days of a month.-->
    <Style x:Key="CalendarDayButtonStyle" TargetType="CalendarDayButton" >
        <Setter Property="MinWidth" Value="5" />
        <Setter Property="MinHeight" Value="5" />
        <!--размер календарного дня-->
        <Setter Property="FontSize" Value="14" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment"  Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CalendarDayButton">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0" />
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Normal" />
                                <VisualState Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HighlightBackground" Storyboard.TargetProperty="Opacity" To="0.4" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HighlightBackground" Storyboard.TargetProperty="Opacity" To="0.5" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HighlightBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0" />
                                        <DoubleAnimation Storyboard.TargetName="NormalText" Storyboard.TargetProperty="Opacity" To=".35" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup Name="SelectionStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Unselected" />
                                <VisualState Name="Selected">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity"  To=".75"  Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup Name="ActiveStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Active" />
                                <VisualState Name="Inactive">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="NormalText" Storyboard.TargetProperty="Opacity" To="0.2" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup Name="DayStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState Name="RegularDay" />
                                <VisualState Name="Today">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="TodayBackground" Storyboard.TargetProperty="Opacity" To="0.3" Duration="0" />
                                        <!--<ColorAnimation Duration="0" Storyboard.TargetName="NormalText" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" To="#FFFFFFFF" />-->
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup Name="BlackoutDayStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState Name="NormalDay" />
                                <VisualState Name="BlackoutDay">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="Blackout" Storyboard.TargetProperty="Opacity" To=".2" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Rectangle x:Name="TodayBackground"
                             RadiusX="0"
                             RadiusY="0"
                             Opacity="0">
                            <Rectangle.Fill>
                                <SolidColorBrush Color="LightPink" />
                            </Rectangle.Fill>
                        </Rectangle>
                        <Rectangle x:Name="SelectedBackground"
                                 RadiusX="0"
                                 RadiusY="0"
                                 Opacity="0">
                            <Rectangle.Fill>
                                <SolidColorBrush Color="{DynamicResource SelectedBackgroundColor}" />
                            </Rectangle.Fill>
                        </Rectangle>
                        <Border Background="{TemplateBinding Background}"
                                  BorderThickness="{TemplateBinding BorderThickness}"
                                  BorderBrush="{TemplateBinding BorderBrush}" />
                        <Rectangle x:Name="HighlightBackground"
                                 RadiusX="0"
                                 RadiusY="0"
                                 Opacity="0">
                            <Rectangle.Fill>
                                <SolidColorBrush Color="{DynamicResource ControlMouseOverColor}" />
                            </Rectangle.Fill>
                        </Rectangle>
                        <ContentPresenter x:Name="NormalText"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Margin="5,1,5,1"
                                          TextElement.Foreground="{DynamicResource TextColor}">
                            <!--<TextElement.Foreground>
                                <SolidColorBrush Color="{DynamicResource TextColor}" />
                            </TextElement.Foreground>-->
                        </ContentPresenter>
                        <Path x:Name="Blackout"
                                Opacity="0"
                                Margin="3"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                RenderTransformOrigin="0.5,0.5"
                                Fill="#FF000000"
                                Stretch="Fill"
                                Data="M8.1772461,11.029181 L10.433105,
                                  11.029181 L11.700684,12.801641 L12.973633,
                                  11.029181 L15.191895,11.029181 L12.844727,
                                  13.999395 L15.21875,17.060919 L12.962891,
                                  17.060919 L11.673828,15.256231 L10.352539,
                                  17.060919 L8.1396484,17.060919 L10.519043,
                                  14.042364 z" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--выделяем выходные дни-->
                        <Trigger Property="Grid.Column" Value="5">
                            <Setter TargetName="NormalText" Property="TextElement.Foreground" Value="OrangeRed"/>
                        </Trigger>
                        <!--выделяем выходные дни-->
                        <Trigger Property="Grid.Column" Value="6">
                            <Setter TargetName="NormalText" Property="TextElement.Foreground" Value="OrangeRed"/>
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="HighlightBackground" Property="Opacity" Value="0.4"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="HighlightBackground" Property="Opacity" Value="0.5"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Style for the months of a year and years of a decade.-->
    <Style TargetType="CalendarButton" x:Key="CalendarButtonStyle">
        <Setter Property="MinWidth"  Value="48" />
        <Setter Property="MinHeight" Value="54" />
        <Setter Property="FontSize"  Value="14" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CalendarButton">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Normal" />
                                <VisualState Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Background" Storyboard.TargetProperty="Opacity" To=".5" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Background" Storyboard.TargetProperty="Opacity" To=".5" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup Name="SelectionStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Unselected" />
                                <VisualState Name="Selected">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity" To=".75" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup Name="ActiveStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Active" />
                                <VisualState Name="Inactive">
                                    <Storyboard>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="NormalText" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"  To="#FF777777" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup Name="CalendarButtonFocusStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState Name="CalendarButtonFocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="CalendarButtonFocusVisual" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="CalendarButtonUnfocused" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Rectangle x:Name="SelectedBackground" 
                                   RadiusX="0" 
                                   RadiusY="0" 
                                   Opacity="0">
                            <Rectangle.Fill>
                                <SolidColorBrush Color="{DynamicResource SelectedBackgroundColor}" />
                            </Rectangle.Fill>
                        </Rectangle>
                        <Rectangle x:Name="Background"
                             RadiusX="0"
                             RadiusY="0"
                             Opacity="0">
                            <Rectangle.Fill>
                                <SolidColorBrush Color="{DynamicResource SelectedBackgroundColor}" />
                            </Rectangle.Fill>
                        </Rectangle>
                        <ContentPresenter x:Name="NormalText"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Margin="6"
                            TextElement.Foreground="{DynamicResource TextColor}">
                        </ContentPresenter>
                        <Rectangle x:Name="CalendarButtonFocusVisual"
                             Visibility="Collapsed"
                             IsHitTestVisible="false"
                             RadiusX="1"
                             RadiusY="1">
                            <Rectangle.Stroke>
                                <SolidColorBrush Color="{DynamicResource SelectedBackgroundColor}" />
                            </Rectangle.Stroke>
                        </Rectangle>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource ControlMediumColor}" />
            </Setter.Value>
        </Setter>
    </Style>

    <!--Button to go to the previous month or year.-->
    <ControlTemplate x:Key="PreviousButtonTemplate" TargetType="{x:Type Button}">
        <Grid Cursor="Hand">
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimation Duration="0"
                            Storyboard.TargetName="path" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)"
                            To="{DynamicResource GlyphMouseOver}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <DoubleAnimation Duration="0"
                             To=".5"
                             Storyboard.TargetProperty="(Shape.Fill).(Brush.Opacity)"
                             Storyboard.TargetName="path" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <!--<Rectangle Fill="Transparent" Opacity="1" Stretch="Fill"/>-->
            <Border 
                  Padding="11"
                  Background="Transparent"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  BorderThickness="0">
                <Path x:Name="path"                    
                    Stretch="Fill"
                    HorizontalAlignment="Center"                    
                    VerticalAlignment="Center"
                    Data="M288.75,232.25 L288.75,240.625 L283,236.625 z"
                    Fill="{DynamicResource TextBoxBackgroundBrush}">
                </Path>
            </Border>
        </Grid>
    </ControlTemplate>

    <!--Button to go to the next month or year.-->
    <ControlTemplate x:Key="NextButtonTemplate" TargetType="{x:Type Button}">
        <Grid Cursor="Hand">
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimation Duration="0" To="{StaticResource GlyphMouseOver}"
                            Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)"
                            Storyboard.TargetName="path" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <DoubleAnimation Duration="0" To=".5"
                             Storyboard.TargetProperty="(Shape.Fill).(Brush.Opacity)"
                             Storyboard.TargetName="path" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <!--<Rectangle Fill="#11E5EBF1" Opacity="1" Stretch="Fill"/>-->
            <Border 
                    Padding="11"
                    Background="Transparent"
                    BorderThickness="0">
                <Path x:Name="path"
                    Data="M282.875,231.875 L282.875,240.375 L288.625,236 z"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Stretch="Fill"
                    Fill="{DynamicResource TextBoxBackgroundBrush}">
                </Path>
            </Border>
        </Grid>
    </ControlTemplate>

    <!--Button to go up a level to the year or decade.-->
    <ControlTemplate x:Key="HeaderButtonTemplate" TargetType="{x:Type Button}">
        <Grid Cursor="Hand"
              HorizontalAlignment="Center"
              VerticalAlignment="Center">
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimation Duration="0" To="{DynamicResource GlyphMouseOver}"
                            Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"
                            Storyboard.TargetName="buttonContent" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <DoubleAnimation Duration="0" To=".5"
                             Storyboard.TargetProperty="Opacity"
                             Storyboard.TargetName="buttonContent" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <ContentPresenter x:Name="buttonContent"
                      Margin="0,0,0,0"
                      ContentTemplate="{TemplateBinding ContentTemplate}"
                      Content="{TemplateBinding Content}"
                      TextElement.Foreground="{DynamicResource TextBoxBackgroundBrush}"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center" 
                      TextElement.FontSize="13"/>
            <!--Размер заголовка календаря-->
        </Grid>
    </ControlTemplate>

    <Style x:Key="CalendarItemStyle" TargetType="{x:Type CalendarItem}">
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CalendarItem}">
                    <ControlTemplate.Resources>
                        <DataTemplate x:Key="{x:Static CalendarItem.DayTitleTemplateResourceKey}">
                            <TextBlock x:Name="DayTitle"
                               FontWeight="Bold"
                               FontSize="11"
                               FontFamily="Verdana"
                               Margin="0,4,0,4"
                               Text="{Binding}"
                               HorizontalAlignment="Center"
                               VerticalAlignment="Center">
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock">
                                        <Setter Property="Foreground" Value="{DynamicResource TextColor}"/>
                                        <Style.Triggers>
                                            <Trigger Property="Grid.Column" Value="5">
                                                <Setter Property="Foreground" Value="OrangeRed"/>
                                            </Trigger>
                                            <Trigger Property="Grid.Column" Value="6">
                                                <Setter Property="Foreground" Value="OrangeRed"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </DataTemplate>
                    </ControlTemplate.Resources>
                    <Grid x:Name="PART_Root">
                        <Grid.Resources>
                            <SolidColorBrush x:Key="DisabledColor"  Color="#A5FFFFFF" />
                        </Grid.Resources>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0"  To="1"
                                           Storyboard.TargetProperty="Opacity"
                                           Storyboard.TargetName="PART_DisabledVisual" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border BorderBrush="{TemplateBinding BorderBrush}"
                              BorderThickness="{TemplateBinding BorderThickness}"
                              Background="{TemplateBinding Background}"
                              CornerRadius="0">
                            <Border BorderBrush="{DynamicResource LightBorderBrush}"
                                    BorderThickness="1"
                                    CornerRadius="0">
                                <Grid>
                                    <Grid.Resources>
                                    </Grid.Resources>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="30"/>
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                    <Button x:Name="PART_PreviousButton"
                                            Template="{StaticResource PreviousButtonTemplate}"    
                                            Focusable="False"
                                            HorizontalAlignment="Left"
                                            VerticalAlignment="Center"
                                            Grid.Column="0"
                                            Grid.Row="0"
                                            Height="30"
                                            Width="30"
                                            />
                                    <Button x:Name="PART_HeaderButton"
                                            FontWeight="Bold"
                                            Focusable="False"
                                            FontSize="13"
                                            HorizontalAlignment="Center"
                                            VerticalAlignment="Center"
                                            Grid.Column="1"
                                            Grid.Row="0"
                                            Template="{StaticResource HeaderButtonTemplate}" />
                                    <Button x:Name="PART_NextButton"
                                            Template="{StaticResource NextButtonTemplate}"
                                            Focusable="False"
                                            HorizontalAlignment="Right"
                                            VerticalAlignment="Center"
                                            Grid.Column="2"
                                            Grid.Row="0"                                            
                                            Height="30"
                                            Width="30"
                                            />
                                    <Grid x:Name="PART_MonthView"
                                                  Visibility="Visible"
                                                  Grid.ColumnSpan="3"
                                                  Grid.Row="1"
                                                  Margin="6"
                                                  HorizontalAlignment="Center"
                                                  VerticalAlignment="Center">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="*" />
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="*" />
                                            <RowDefinition Height="*" />
                                            <RowDefinition Height="*" />
                                            <RowDefinition Height="*" />
                                            <RowDefinition Height="*" />
                                            <RowDefinition Height="*" />
                                            <RowDefinition Height="*" />
                                        </Grid.RowDefinitions>
                                    </Grid>
                                    <Grid x:Name="PART_YearView"
                                          Visibility="Hidden"
                                          Grid.ColumnSpan="3"
                                          Grid.Row="1"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          Margin="0">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="*" />
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="*" />
                                            <RowDefinition Height="*" />
                                            <RowDefinition Height="*" />
                                        </Grid.RowDefinitions>
                                    </Grid>
                                </Grid>
                            </Border>
                        </Border>
                        <Rectangle x:Name="PART_DisabledVisual"
                             Fill="{StaticResource DisabledColor}"
                             Opacity="0"
                             RadiusY="0"
                             RadiusX="0"
                             Stretch="Fill"
                             Stroke="{StaticResource DisabledColor}"
                             StrokeThickness="1"
                             Visibility="Collapsed" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Visibility"  TargetName="PART_DisabledVisual"  Value="Visible" />
                        </Trigger>
                        <DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}"
                                     Value="Year">
                            <Setter Property="Visibility" TargetName="PART_MonthView" Value="Hidden" />
                            <Setter Property="Visibility" TargetName="PART_YearView"  Value="Visible" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor,  AncestorType={x:Type Calendar}}}"
                                     Value="Decade">
                            <Setter Property="Visibility" TargetName="PART_MonthView" Value="Hidden" />
                            <Setter Property="Visibility" TargetName="PART_YearView" Value="Visible" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="StandardCalendarStyle" TargetType="{x:Type Calendar}">
        <Setter Property="CalendarButtonStyle" Value="{StaticResource CalendarButtonStyle}" />
        <Setter Property="CalendarDayButtonStyle" Value="{StaticResource CalendarDayButtonStyle}" />
        <Setter Property="CalendarItemStyle" Value="{StaticResource CalendarItemStyle}" />
        <Setter Property="Foreground"  Value="{DynamicResource TextColor}" />
        <!--<Setter Property="Background" Value="White"/>-->
        <Setter Property="BorderBrush" Value="{DynamicResource LightBorderBrush}"/>
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0.5,1"  StartPoint="0.5,0">

                    <!--The first two gradient stops specifies the background for 
            the calendar's heading and navigation buttons.-->
                    <!--<GradientStop Color="{DynamicResource HeaderTopColor}" Offset="0" />
                    <GradientStop Color="{DynamicResource ControlMediumColor}" Offset="0.16" />-->
                    <GradientStop Color="{DynamicResource HeaderTopColor}" Offset="0" />
                    <GradientStop Color="{DynamicResource HeaderTopColor}" Offset="0.16" />

                    <!--The next gradient stop specifies the background for 
            the calendar area.-->
                    <GradientStop Color="{DynamicResource ControlLightColor}"  Offset="0.16" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <!--<Setter Property="BorderBrush">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0,1"
                           StartPoint="0,0">
                    <GradientStop Color="{DynamicResource BorderLightColor}"  Offset="0" />
                    <GradientStop Color="{DynamicResource BorderDarkColor}"   Offset="1" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>-->
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Calendar}">
                    <StackPanel x:Name="PART_Root"  
                                HorizontalAlignment="Center">
                        <CalendarItem x:Name="PART_CalendarItem"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Style="{TemplateBinding CalendarItemStyle}"/>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="Calendar" BasedOn="{StaticResource StandardCalendarStyle}"/>

    <!--Calendar-->


    <!-- SimpleStyles: TextBox -->
    <Style x:Key="StandardTextBox" TargetType="{x:Type TextBoxBase}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextColor}"/>
        <Setter Property="Background" Value="{DynamicResource TextBoxBackgroundBrush}"/>
        <Setter Property="MinWidth" Value="10"/>
        <Setter Property="MinHeight" Value="10"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="CaretBrush" Value="{DynamicResource TextBoxCaret}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border 
                        x:Name="Border"
                        CornerRadius="0" 
                        Padding="2"
                        Background="{DynamicResource TextBoxBackgroundBrush}"
                        BorderBrush="{DynamicResource LightBorderBrush}"
                        BorderThickness="1" >
                        <ScrollViewer Margin="0" x:Name="PART_ContentHost"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource SolidBorderBrush}" />
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource TextBoxInActiveBackground}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource SolidBorderBrush}"/>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource TextBoxInActiveBackground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="TextBox" BasedOn="{StaticResource StandardTextBox}"/>


    <Style x:Key="StandardPasswordBox" TargetType="{x:Type PasswordBox}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="FontFamily" Value="Verdana"/>
        <Setter Property="PasswordChar" Value="●"/>
        <Setter Property="MinWidth" Value="120"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border 
                        x:Name="Border"
                        CornerRadius="2" 
                        Padding="2" 
                        Background="{StaticResource TextBoxBackgroundBrush}"
                        BorderBrush="{StaticResource LightBorderBrush}"
                        BorderThickness="1" >
                        <ScrollViewer x:Name="PART_ContentHost" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource SolidBorderBrush}" />
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource TextBoxInActiveBackground}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource SolidBorderBrush}"/>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource TextBoxInActiveBackground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="PasswordBox" BasedOn="{StaticResource StandardPasswordBox}"/>

    <!-- SimpleStyles: DataGrid -->


    <Style x:Key="StandardDataGrid" TargetType="{x:Type DataGrid}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource DataGridBorderBrush}"/>
        <Setter Property="BorderBrush" Value="#FF688CAF"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGrid}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" 
							BorderThickness="{TemplateBinding BorderThickness}" 
							Background="{DynamicResource DataGridBackgroundBrush}" 
							Padding="{TemplateBinding Padding}" 
							SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="DG_ScrollViewer" Focusable="false">
                            <ScrollViewer.Template>
                                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <Border x:Name="HeaderBackground" 
                                                Grid.Row="0"
                                                Grid.Column="0"                                                
                                                Grid.ColumnSpan="3"
                                                BorderThickness="0"
                                                Background="{DynamicResource DataGridColumnHeaderBackgroundBrush}"
                                                />
                                        <Button Command="{x:Static DataGrid.SelectAllCommand}" 
											Focusable="false"												
											Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" 
											Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}">
                                            <Button.Style>
                                                <Style TargetType="{x:Type Button}">
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type Button}">
                                                                <Grid x:Name="Grid">
                                                                    <Border x:Name="Background" 
                                                                        Background="{DynamicResource DataGridColumnHeaderBackgroundBrush}" 
                                                                        BorderThickness="0">
                                                                        <Path x:Name="path" 
                                                                            Fill="Gray" 
                                                                            Data="F 1 M -2,8 L 6,8 6,0 Z" 
                                                                            VerticalAlignment="Center" 
                                                                            HorizontalAlignment="Center"
                                                                            Visibility="Hidden"/>
                                                                    </Border>
                                                                    <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                                                    Margin="{TemplateBinding Padding}" 
                                                                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                                                                    RecognizesAccessKey="True"/>
                                                                </Grid>
                                                                <ControlTemplate.Triggers>
                                                                    <Trigger Property="IsDefault" Value="True">
                                                                        <Setter TargetName="Background" Property="BorderBrush"  Value="{StaticResource DefaultedBorderBrush}"/>
                                                                    </Trigger>
                                                                    <Trigger Property="IsMouseOver" Value="True">
                                                                        <Setter TargetName="Background" Property="Background" Value="{StaticResource DataGridHeaderMouseOverBrush}" />
                                                                        <Setter TargetName="path" Property="Visibility"  Value="Visible"/>
                                                                    </Trigger>
                                                                    <Trigger Property="IsPressed" Value="True">
                                                                        <Setter TargetName="path" Property="Fill" Value="White" />
                                                                    </Trigger>
                                                                    <Trigger Property="IsEnabled" Value="False">
                                                                        <!--<Setter Property="Background" Value="{StaticResource DisabledBackgroundBrush}" TargetName="Background"/>-->
                                                                        <Setter Property="Fill" TargetName="path" Value="{StaticResource DisabledForegroundBrush}"/>
                                                                    </Trigger>
                                                                </ControlTemplate.Triggers>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </Button.Style>
                                        </Button>
                                        <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" 
												Grid.Column="1" 
												Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" 
												CanContentScroll="{TemplateBinding CanContentScroll}" 
												Grid.ColumnSpan="2" Grid.Row="1"/>
                                        <ScrollBar x:Name="PART_VerticalScrollBar"
												Grid.Column="2" 
												Grid.Row="1"
												Maximum="{TemplateBinding ScrollableHeight}" 
												Orientation="Vertical" 
												Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" 
												Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" 
												ViewportSize="{TemplateBinding ViewportHeight}"/>
                                        <Border x:Name="HeaderBorder" 
                                                Grid.Row="0"
                                                Grid.Column="0"                                                
                                                Grid.ColumnSpan="3"
                                                BorderThickness="0,0,0,1"
                                                BorderBrush="{DynamicResource DataGridHeaderBorderBrush}"
                                                >
                                        </Border>
                                        <Grid Grid.Column="1" Grid.Row="2">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <ScrollBar x:Name="PART_HorizontalScrollBar" 
														Grid.Column="1" Maximum="{TemplateBinding ScrollableWidth}" 
														Orientation="Horizontal" 
														Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" 
														Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" 
														ViewportSize="{TemplateBinding ViewportWidth}"/>
                                        </Grid>
                                    </Grid>
                                </ControlTemplate>
                            </ScrollViewer.Template>
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <!--OnlySinceFrameWork4.5-->
                    <!--<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>-->
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type DataGrid}" BasedOn="{StaticResource StandardDataGrid}" />

    <Style x:Key="StandardDataGridCell" TargetType="{x:Type DataGridCell}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource TextBoxFont}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" 
							BorderThickness="{TemplateBinding BorderThickness}" 
							Background="{TemplateBinding Background}" 
							SnapsToDevicePixels="True"
                            >
                        <ContentPresenter Margin="5,0,5,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource DataGridSelectedCellBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource DataGridSelectedCellBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource TextBoxFont}"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <!--<Setter Property="BorderBrush" Value="{StaticResource DataGridSelectedCellBorderBrush}"/>-->
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="DataGridCell" BasedOn="{StaticResource StandardDataGridCell}"/>

    <Style x:Key="ColumnHeaderGripperStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Width" Value="8"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Cursor" Value="SizeWE"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="StandardDataGridColumnHeader" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <!--<Setter Property="Foreground" Value="{DynamicResource TextBoxFont}"/>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <Grid>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Border x:Name="BackgroundBorder" 
                                    Grid.ColumnSpan="2" 
                                    Background="{DynamicResource DataGridColumnHeaderBackgroundBrush}"                                    
                                    Padding="{TemplateBinding Padding}"
                                    />
                            <ContentPresenter x:Name="TextContent"
								Margin="6,4,0,4"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
								RecognizesAccessKey="True" 
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                TextBlock.Foreground="{DynamicResource TextBoxFont}"/>
                            <Path x:Name="SortArrow" 
                                  Grid.Column="1" 
                                  Width="8" 
                                  Height="6" 
                                  Margin="4,4,4,4"
                                  Fill="{StaticResource GlyphBrush}" 
                                  Visibility="Hidden" 
                                  Data="M0,0 L1,0 0.5,1 z" 
                                  Stretch="Fill"
                                  VerticalAlignment="Center" 
                                  RenderTransformOrigin="0.5,0.4" />
                        </Grid>
                        <Thumb x:Name="PART_LeftHeaderGripper" HorizontalAlignment="Left" Style="{StaticResource ColumnHeaderGripperStyle}"/>
                        <Thumb x:Name="PART_RightHeaderGripper" HorizontalAlignment="Right" Style="{StaticResource ColumnHeaderGripperStyle}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="BackgroundBorder" Property="Background" Value="{StaticResource DataGridHeaderMouseOverBrush}"/>
                        </Trigger>
                        <Trigger Property="SortDirection" Value="Ascending" >
                            <Setter TargetName="SortArrow" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="SortArrow" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="180"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="SortDirection" Value="Descending">
                            <Setter TargetName="SortArrow" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="DisplayIndex" Value="0">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_LeftHeaderGripper"></Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextBlock.Foreground" Value="{DynamicResource DisabledForegroundBrush}" TargetName="TextContent"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type DataGridColumnHeader}" BasedOn="{StaticResource StandardDataGridColumnHeader}"/>

    <Style x:Key="RowHeaderGripperStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Height" Value="8"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Cursor" Value="SizeNS"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="StandardDataGridRowHeader" TargetType="{x:Type DataGridRowHeader}">
        <Setter Property="Foreground" Value="{DynamicResource TextBoxFont}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRowHeader}">
                    <Grid>
                        <Border x:Name="Border"
                            Background="{DynamicResource DataGridRowHeaderBackgroundBrush}"
                            BorderBrush="{DynamicResource NormalBorderBrush}"
                            BorderThickness="0,0,1,1">

                            <StackPanel Orientation="Horizontal">
                                <ContentPresenter 
                                    Margin="4,0,8,0"
                                    RecognizesAccessKey="True" 
									SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
									VerticalAlignment="Center"/>
                                <Control SnapsToDevicePixels="false" 
										Template="{Binding ValidationErrorTemplate, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}" 
										Visibility="{Binding (Validation.HasError), Converter={StaticResource bool2VisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}"/>
                            </StackPanel>
                        </Border>
                        <Thumb x:Name="PART_TopHeaderGripper" Style="{DynamicResource RowHeaderGripperStyle}" VerticalAlignment="Top"/>
                        <Thumb x:Name="PART_BottomHeaderGripper" Style="{DynamicResource RowHeaderGripperStyle}" VerticalAlignment="Bottom"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsRowSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource DataGridRowHeaderSelectedBackgroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type DataGridRowHeader}" BasedOn="{StaticResource StandardDataGridRowHeader}"/>


    <Style x:Key="StandardDataGridRow" TargetType="{x:Type DataGridRow}">
        <Setter Property="Background" Value="{DynamicResource DataGridBorderBackground}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextBoxFont}"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
        <Setter Property="ValidationErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <TextBlock Foreground="Red" Margin="2,0,0,0" Text="!" VerticalAlignment="Center"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRow}">
                    <Border x:Name="DGR_Border" 
							BorderBrush="{TemplateBinding BorderBrush}" 
							BorderThickness="{TemplateBinding BorderThickness}" 
							Background="{TemplateBinding Background}" 
							SnapsToDevicePixels="True">
                        <SelectiveScrollingGrid>
                            <SelectiveScrollingGrid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </SelectiveScrollingGrid.ColumnDefinitions>
                            <SelectiveScrollingGrid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </SelectiveScrollingGrid.RowDefinitions>
                            <DataGridCellsPresenter 
								Grid.Column="1" 
								ItemsPanel="{TemplateBinding ItemsPanel}" 
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            <DataGridDetailsPresenter 
								Grid.Column="1" 
								Grid.Row="1" 
								SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding AreRowDetailsFrozen, ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical}, Converter={x:Static DataGrid.RowDetailsScrollingConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" 
								Visibility="{TemplateBinding DetailsVisibility}"/>
                            <DataGridRowHeader 
								Grid.RowSpan="2" 
								SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical" 
								Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Row}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                        </SelectiveScrollingGrid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!--Since .NET 4.5 only-->
            <!--<Trigger Property="IsNewItem" Value="True">
                <Setter Property="Margin" Value="{Binding NewItemMargin, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
            </Trigger>-->
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="{DynamicResource DataGridRowMouseOverBrush}" />
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                    <Condition Binding="{Binding Path=SelectionUnit, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Value="FullRow"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource DataGridSelectedCellBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource DataGridSelectedCellBrush}"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type DataGridRow}" BasedOn="{StaticResource StandardDataGridRow}"/>

    <!-- ScrollViewer -->
    <Style x:Key="StandardScrollViewer" TargetType="{x:Type ScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Rectangle x:Name="Corner" Grid.Column="1" 
                            Fill="{DynamicResource ScrollBarBackgroundBrush}" 
                            Grid.Row="1"/>
                        <ScrollContentPresenter 
                            x:Name="PART_ScrollContentPresenter" 
                            CanContentScroll="{TemplateBinding CanContentScroll}" 
                            CanHorizontallyScroll="False" 
                            CanVerticallyScroll="False" 
                            ContentTemplate="{TemplateBinding ContentTemplate}" 
                            Content="{TemplateBinding Content}" 
                            Grid.Column="0" 
                            Margin="{TemplateBinding Padding}" 
                            Grid.Row="0"/>
                        <ScrollBar x:Name="PART_VerticalScrollBar" 
                            AutomationProperties.AutomationId="VerticalScrollBar" 
                            Cursor="Arrow" 
                            Grid.Column="1" 
                            Maximum="{TemplateBinding ScrollableHeight}" 
                            Minimum="0" 
                            Grid.Row="0" 
                            Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" 
                            Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" 
                            ViewportSize="{TemplateBinding ViewportHeight}"/>
                        <ScrollBar x:Name="PART_HorizontalScrollBar" 
                            AutomationProperties.AutomationId="HorizontalScrollBar" 
                            Cursor="Arrow" 
                            Grid.Column="0" 
                            Maximum="{TemplateBinding ScrollableWidth}" 
                            Minimum="0" 
                            Orientation="Horizontal" 
                            Grid.Row="1" 
                            Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" 
                            Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" 
                            ViewportSize="{TemplateBinding ViewportWidth}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource StandardScrollViewer}"/>

    <!-- ScrollBar -->
    <Style x:Key="StandardScrollBar" TargetType="{x:Type ScrollBar}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid x:Name="GridScrollBar" 
                              Width="16" 
                              Background="{DynamicResource ScrollBarBackgroundBrush}">
                            <Grid.RowDefinitions>
                                <RowDefinition MaxHeight="16"/>
                                <RowDefinition/>
                                <RowDefinition MaxHeight="16"/>
                            </Grid.RowDefinitions>
                            <RepeatButton x:Name="PageUpButton" 
                                          Grid.Row="0" 
                                          Command="ScrollBar.LineUpCommand" 
                                          Style="{DynamicResource RepeatButtonArrowScrollBar}"
                                          SnapsToDevicePixels = "True">
                            </RepeatButton>

                            <Track x:Name="PART_Track" 
                                   Grid.Row="1" 
                                   Orientation="Vertical" 
                                   IsDirectionReversed="True">
                                <Track.Thumb>
                                    <Thumb Style="{DynamicResource ThumbScrollBar}"/>
                                </Track.Thumb>
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton x:Name="DecreaseRepeatButton" 
                                                  Command="ScrollBar.PageUpCommand" 
                                                  Style="{DynamicResource RepeatButtonPageScrollBar}"/>
                                </Track.DecreaseRepeatButton>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton x:Name="IncreaseRepeatButton" 
                                                  Command="ScrollBar.PageDownCommand" 
                                                  Style="{DynamicResource RepeatButtonPageScrollBar}"/>
                                </Track.IncreaseRepeatButton>
                            </Track>
                            <RepeatButton x:Name="PageDownButton" 
                                          Grid.Row="2" 
                                          Command="ScrollBar.LineDownCommand" 
                                          Style="{DynamicResource RepeatButtonArrowScrollBar}">
                                <RepeatButton.LayoutTransform>
                                    <RotateTransform Angle="180"/>
                                </RepeatButton.LayoutTransform>
                            </RepeatButton>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Horizontal">
                            <Setter Property="LayoutTransform" TargetName="GridScrollBar">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_Track" Property="Orientation" Value="Vertical"/>
                            <Setter Property="Command" Value="ScrollBar.LineRightCommand" TargetName="IncreaseRepeatButton"/>
                            <Setter Property="Command" Value="ScrollBar.LineLeftCommand" TargetName="DecreaseRepeatButton"/>
                            <Setter Property="Command" Value="ScrollBar.PageRightCommand" TargetName="PageDownButton"/>
                            <Setter Property="Command" Value="ScrollBar.PageLeftCommand" TargetName="PageUpButton"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource StandardScrollBar}"/>

    <Style x:Key="RepeatButtonArrowScrollBar" TargetType="{x:Type RepeatButton}" BasedOn="{x:Null}">
        <Setter Property="Height" Value="16"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <ControlTemplate.Resources>
                        <Geometry x:Key="path">M0,4 L4,0 L8,4 Z</Geometry>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Border x:Name="brd" 
                                Background="Transparent"
                                Margin="1"/>
                        <Path x:Name="RepeatButtonArrow" 
                              Fill="{DynamicResource ScrollBarButtonBackgroundBrush}" 
                              Data="{StaticResource path}"
                              StrokeStartLineCap="Round" 
                              StrokeEndLineCap="Round" 
                              Stretch="Fill" 
                              UseLayoutRounding="False"
                              HorizontalAlignment="Center" 
                              VerticalAlignment="Center" 
                              Width="8"
                              Height="4" 
                              RenderTransformOrigin="0.5,0.5"/>
                        <ContentPresenter HorizontalAlignment="Center" 
                                          VerticalAlignment="Center" 
                                          Content="{TemplateBinding Content}" 
                                          ContentTemplate="{TemplateBinding ContentTemplate}" 
                                          ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="RepeatButtonArrow" Property="Fill" Value="{DynamicResource ScrollBarMouseOverArrowBrush}"/>
                            <Setter TargetName="brd" Property="Background" Value="{DynamicResource ScrollBarButtonBackgroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="RepeatButtonArrow" Property="Fill" Value="{DynamicResource ScrollBarButtonMousePressedBrush}"/>
                            <Setter TargetName="brd" Property="Background" Value="{DynamicResource ScrollBarButtonBackgroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="RepeatButtonArrow" Property="Fill" Value="{DynamicResource ScrollBarDisabledBackgroundBrush}"/>
                            <Setter TargetName="RepeatButtonArrow" Property="Opacity" Value="0.72"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ThumbScrollBar" TargetType="{x:Type Thumb}">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Rectangle x:Name="rect_thumb" 
                               Fill="{DynamicResource ScrollBarThumbBackgroundBrush}" 
                               Width="12"
                               MinHeight="8"
                               Margin="1"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="rect_thumb" Property="Fill" Value="{DynamicResource ScrollBarThumbPressedBackgroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter TargetName="rect_thumb" Property="Fill" Value="{DynamicResource ScrollBarThumbPressedBackgroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RepeatButtonPageScrollBar" TargetType="{x:Type RepeatButton}">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="ToggleButton">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="24" />
            </Grid.ColumnDefinitions>
            <Border
                Grid.ColumnSpan="2"
                BorderThickness="0"
                Background="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}"/>
            <!--<Border
                x:Name="Border" 
                Grid.ColumnSpan="2"
                CornerRadius="1"
                Background="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}"
                BorderBrush="{StaticResource LightBorderBrush}"
                BorderThickness="1" />-->
            <Border 
                x:Name="ArrowBorder"
                Grid.Column="1"
                Margin="2"
                BorderThickness="0"
                Background="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}">
                <Path 
                    x:Name="Arrow"                    
                    Fill="{StaticResource GlyphBrush}"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Data="M 0 0 L 4 4 L 8 0 Z"/>
            </Border>

        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                <Setter TargetName="ArrowBorder" Property="Background" Value="{DynamicResource GlyphBackgroundMouseOverBrush}" />
            </Trigger>
            <!--<Trigger Property="ToggleButton.IsChecked" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBrush}" />
            </Trigger>-->
            <Trigger Property="IsEnabled" Value="False">
                <!--<Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledBackgroundBrush}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DisabledBorderBrush}" />-->
                <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
                <Setter TargetName="Arrow" Property="Fill" Value="{StaticResource DisabledForegroundBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="TextBox">
        <!--<Border x:Name="PART_ContentHost" 
                Focusable="False" 
                Background="{TemplateBinding Background}" 
                >
        </Border>-->
        <ScrollViewer x:Name="PART_ContentHost" 
                      Background="Transparent" 
                      Focusable="False" 
                      HorizontalScrollBarVisibility="Hidden" 
                      VerticalScrollBarVisibility="Hidden" Template="{DynamicResource ScrollViewerControlTemplate1}"/>
    </ControlTemplate>

    <Style x:Key="StandardComboBox" TargetType="ComboBox">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="Foreground" Value="{DynamicResource TextBoxFont}"/>
        <Setter Property="MinWidth" Value="20"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Border
                        x:Name="Border"
                        Background="Gainsboro"
                        BorderBrush="{StaticResource LightBorderBrush}"
                        BorderThickness="1">
                        <Grid>
                            <!--<Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="24"/>
                            </Grid.ColumnDefinitions>-->
                            <ToggleButton 
                              Name="ToggleButton" 
                              Template="{StaticResource ComboBoxToggleButton}" 
                              Focusable="false"
                              Background="{DynamicResource TextBoxBackgroundBrush}"
                              IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                              ClickMode="Press"
                              >
                            </ToggleButton>
                            <ContentPresenter
                              Name="ContentSite"
                              IsHitTestVisible="False" 
                              Content="{TemplateBinding SelectionBoxItem}"
                              ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                              Margin="5,0,29,0"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Stretch" />
                            <TextBox x:Name="PART_EditableTextBox"
                              Style="{x:Null}" 
                              Template="{StaticResource ComboBoxTextBox}" 
                              HorizontalAlignment="Stretch" 
                              VerticalAlignment="Center" 
                              
                              Focusable="True" 
                              Background="{DynamicResource TextBoxBackgroundBrush}"                              
                              Visibility="Hidden"
                              IsReadOnly="{TemplateBinding IsReadOnly}"/>
                            <Popup 
                              Name="Popup"
                              Placement="Bottom"
                              IsOpen="{TemplateBinding IsDropDownOpen}"
                              AllowsTransparency="True" 
                              Focusable="False"
                              PopupAnimation="Slide">
                                <Grid 
                                Name="DropDown"
                                SnapsToDevicePixels="True"                
                                MinWidth="{TemplateBinding ActualWidth}"
                                MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <Border 
                                      x:Name="DropDownBorder"
                                      Background="{DynamicResource ComboxItemBackgroundBrush}"
                                      BorderThickness="1"
                                      CornerRadius="0"
                                      BorderBrush="{DynamicResource SolidBorderBrush}"/>
                                    <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                            <Setter TargetName="PART_EditableTextBox" Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <!--<Setter TargetName="DropDownBorder" Property="CornerRadius" Value="4"/>-->
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEditable"  Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility"	Value="Visible"/>
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource TextBoxBackgroundBrush}"/>
                            <Setter TargetName="ToggleButton" Property="Background" Value="{DynamicResource TextBoxBackgroundBrush}"/>
                            <Setter TargetName="ToggleButton" Property="Width" Value="24"/>
                            <Setter TargetName="ToggleButton" Property="HorizontalAlignment" Value="Right"/>
                            <!--<Setter TargetName="PART_EditableTextBox" Property="Background" Value="{DynamicResource TextBoxBackgroundBrush}"/>-->
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource SolidBorderBrush}" />
                        </Trigger>
                        <!--<Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter Property="IsDropDownOpen" Value="True"/>
                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>
    <Style TargetType="ComboBox" BasedOn="{StaticResource StandardComboBox}"/>

    <!-- SimpleStyles: ComboBoxItem -->
    <Style x:Key="{x:Type ComboBoxItem}" TargetType="ComboBoxItem">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBoxItem">
                    <Border 
                        Name="Border"
                        Padding="2"
                        SnapsToDevicePixels="true">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DataGridRowMouseOverBrush}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource DataGridSelectedCellBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="StandardGroupBox" TargetType="GroupBox">
        <Setter Property="Foreground" Value="{DynamicResource TextColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="6"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="6"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="6"/>
                        </Grid.RowDefinitions>
                        <Border BorderBrush="Transparent" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" 
                                CornerRadius="0"
                                Grid.ColumnSpan="4" 
                                Grid.Column="0"                                 
                                Grid.Row="1" 
                                Grid.RowSpan="3"/>
                        <Border BorderBrush="{DynamicResource NormalBorderBrush}" 
                                BorderThickness="1" 
                                Grid.ColumnSpan="4" 
                                CornerRadius="0" 
                                Grid.Row="1" 
                                Grid.RowSpan="3">
                            <Border.OpacityMask>
                                <MultiBinding ConverterParameter="7" UpdateSourceTrigger="Default">
                                    <MultiBinding.Converter>
                                        <BorderGapMaskConverter/>
                                    </MultiBinding.Converter>
                                    <Binding ElementName="Header" Path="ActualWidth"/>
                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}"/>
                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}"/>
                                </MultiBinding>
                            </Border.OpacityMask>
                            <!--<Border BorderBrush="{TemplateBinding BorderBrush}" 
                                    BorderThickness="{TemplateBinding BorderThickness}" 
                                    CornerRadius="3">
                                <Border BorderBrush="White" 
                                        BorderThickness="{TemplateBinding BorderThickness}" 
                                        CornerRadius="2"/>
                            </Border>-->
                        </Border>
                        <Border x:Name="Header" 
                                Grid.Column="1" 
                                Padding="3,1,3,3" 
                                Grid.Row="0" 
                                Grid.RowSpan="2">
                            <ContentPresenter ContentTemplate="{TemplateBinding HeaderTemplate}" 
                                              Content="{TemplateBinding Header}" 
                                              ContentStringFormat="{TemplateBinding HeaderStringFormat}" 
                                              ContentSource="Header" 
                                              RecognizesAccessKey="True" 
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                        <ContentPresenter 
                            Grid.ColumnSpan="2" 
                            ContentTemplate="{TemplateBinding ContentTemplate}" 
                            Content="{TemplateBinding Content}" 
                            Grid.Column="1" 
                            ContentStringFormat="{TemplateBinding ContentStringFormat}" 
                            Margin="{TemplateBinding Padding}" 
                            Grid.Row="2" 
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="GroupBox" BasedOn="{StaticResource StandardGroupBox}"/>

    <!-- SimpleStyles: RadioButton -->
    <Style x:Key="StandardRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <!--<Setter Property="FocusVisualStyle"	Value="{StaticResource RadioButtonFocusVisual}"/>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Grid Width="13" 
                                  Height="13" >
                                <Ellipse x:Name="Border"  
                                         Fill="{StaticResource NormalBrush}"
                                         StrokeThickness="1"
                                         Stroke="{DynamicResource NormalBorderBrush}" />
                                <Ellipse x:Name="CheckMark"
                                        Margin="4"
                                        Fill="{StaticResource GlyphBrush}" />
                            </Grid>
                        </BulletDecorator.Bullet>
                        <ContentPresenter 
                                Margin="4,0,0,0"
                                VerticalAlignment="Center"
                                HorizontalAlignment="Left"
                                RecognizesAccessKey="True"/>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Fill" Value="{StaticResource DarkBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Fill" Value="{StaticResource PressedBrush}" />
                            <Setter TargetName="Border" Property="Stroke" Value="{StaticResource GlyphBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Fill" Value="{StaticResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="Stroke" Value="#40000000" />
                            <Setter Property="Foreground" Value="#80000000"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type RadioButton}" BasedOn="{StaticResource StandardRadioButton}"/>


    <!-- SimpleStyles: RichTextBox -->

    <Style x:Key="{x:Type RichTextBox}"
       TargetType="{x:Type RichTextBox}">
        <Style.Resources>
            <Style x:Key="{x:Type FlowDocument}"
           TargetType="{x:Type FlowDocument}">
                <Setter Property="OverridesDefaultStyle"
            Value="true"/>
            </Style>
        </Style.Resources>
        <Style.BasedOn>
            <StaticResource ResourceKey="{x:Type TextBox}"/>
        </Style.BasedOn>
    </Style>

    <!-- ListBox -->

    <Style x:Key="StandardListBox"  TargetType="ListBox">
        <Setter Property="SnapsToDevicePixels"  Value="true" />
        <Setter Property="OverridesDefaultStyle"  Value="true" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox">
                    <Border Name="Border"
                            BorderThickness="1"
                            CornerRadius="2"
                            Background="{StaticResource TextBoxBackgroundBrush}"
                        BorderBrush="{StaticResource LightBorderBrush}">
                        <ScrollViewer Margin="0" Focusable="false">
                            <StackPanel Margin="2" IsItemsHost="True"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"  Value="false">
                            <Setter TargetName="Border" Property="Background">
                                <Setter.Value>
                                    <SolidColorBrush Color="{StaticResource DisabledControlLightColor}" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="Border" Property="BorderBrush">
                                <Setter.Value>
                                    <SolidColorBrush Color="{DynamicResource DisabledBorderLightColor}" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource SolidBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type ListBox}"  TargetType="ListBox" BasedOn="{StaticResource StandardListBox}"/>

    <Style x:Key="StandardListBoxItem"  TargetType="ListBoxItem">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Foreground" Value="{DynamicResource TextColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border x:Name="Border"
                            Padding="2"
                            SnapsToDevicePixels="true"
                            Background="{DynamicResource ComboxItemBackgroundBrush}">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource DataGridRowMouseOverBrush}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource DataGridSelectedCellBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="Selector.IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DataGridInActiveSelectedCellBrush}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type ListBoxItem}"  TargetType="ListBoxItem" BasedOn="{StaticResource StandardListBoxItem}"/>


    <!-- SimpleStyles: TabControl -->
    <Style  TargetType="{x:Type TabControl}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Foreground" Value="{DynamicResource TextColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid KeyboardNavigation.TabNavigation="Local" SnapsToDevicePixels="True">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <!--<Border Background="Transparent" BorderThickness="0,0,0,5"
                                BorderBrush="{StaticResource DarkBrush}"
                                Margin="0,0,0,0" >-->

                        <TabPanel 
                              x:Name="HeaderPanel"
                              Grid.Row="0"
                              Panel.ZIndex="1" 
                              Margin="0,0,4,-1" 
                              IsItemsHost="True"
                              KeyboardNavigation.TabIndex="1"
                              Background="Transparent" />
                        <!--</Border>-->
                        <Border 
                                x:Name="Border" 
                                Grid.Row="1" 
                                Background="{DynamicResource Background}" 
                                BorderBrush="{DynamicResource LightBorderBrush}" 
                                BorderThickness="1,1,1,1" 
                                CornerRadius="0" 
                                KeyboardNavigation.TabNavigation="Local"
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                KeyboardNavigation.TabIndex="2" >

                            <ContentPresenter 
                                    x:Name="PART_SelectedContentHost"
                                    Margin="4"
                                    ContentSource="SelectedContent" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--SimpleStyles: TabItem-->

    <Style TargetType="{x:Type TabItem}">
        <Setter Property="Foreground" Value="{DynamicResource TextColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid SnapsToDevicePixels="True">
                        <Border 
                              x:Name="Border"
                              Margin="0,0,-1,0" 
                              Background="{DynamicResource TitleBarBackgroundBrush}"
                              BorderBrush="{DynamicResource LightBorderBrush}" 
                              BorderThickness="1,1,1,1" 
                              CornerRadius="0,0,0,0" >
                            <ContentPresenter x:Name="ContentSite"                                              
                              VerticalAlignment="Center"
                              HorizontalAlignment="Center"
                              ContentSource="Header"
                              Margin="12,2,12,2"
                              RecognizesAccessKey="True"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Panel.ZIndex" Value="100" />
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource Background}" />
                            <Setter TargetName="Border" Property="BorderThickness" Value="1,1,1,0" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true"/>
                                <Condition Property="IsSelected" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DarkBrush}" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


</ResourceDictionary>